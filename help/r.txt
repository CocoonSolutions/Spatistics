-- run app with shiny
> runApp("App-1")

-- display in showcase mode
> runApp("App-1", display.mode = "showcase")

-- load csv
> data= read.csv("C:/Users/PC001/Desktop/StoryTelling/gitRepo/data/data1trans2.csv")

-- shiny leaflet quick implementation
> app = shinyApp(
+   ui = fluidPage(leafletOutput('myMap')),
+   server = function(input, output) {
+     map = leaflet() %>% addProviderTiles(providers$CartoDB.Positron)
+     output$myMap = renderLeaflet(map)
+   }
+ )
-- render in browser
> if (interactive()) print(app)

-- shiny server import csv
  # import data from csv file ---
  output$contents <- renderTable({
    # checking for required file ---
    req(input$file1)
    # read uploaded file and save into local var ---
    data <- read.csv(input$file1$datapath,
                     header = input$header,
                     sep = input$sep,
                     quote = input$quote)
    head(data)
  })
-- shiny ui import csv
tabPanel("Import Data",
                              # Sidebar layout with input and output definitions ----
                              sidebarLayout(
                                # Sidebar panel for inputs ----
                                sidebarPanel(
                                  # Input: Select a file ----
                                  fileInput("file1", "Choose CSV File:",
                                            multiple = TRUE,
                                            accept = c("text/csv",
                                                       "text/comma-separated-values,text/plain",
                                                       ".csv")),
                                  # Input: Checkbox if file has header ----
                                  checkboxInput("header", "Header", TRUE),
                                  # Input: Select separator ----
                                  radioButtons("sep","Choose Separator:",
                                               choices = c(Comma = ",",
                                                           Semicolon = ";",
                                                           Tab = "\t"),
                                               selected = ","),
                                  # Input: Select quotes ----
                                  radioButtons("quote", "Choose Text Quotes:",
                                               choices = c(None = "",
                                                           "Double Quote" = '"',
                                                           "Single Quote" = "'"),
                                               selected = '"')
                                ),
                                # Main panel for displaying outputs ----
                                mainPanel(
                                  # Output: Data file ----
                                  tableOutput("contents")
                                )
                              )
                     )
					 
-- execute sql in dataframes
> library(sqldf)
> data1 = sqldf("select data.countryname2 country, data.lon, data.lat, count(*) cnt, sum(data.quantity) quantity from data group by data.countryname2, data.lon, data.lat order by sum(data.quantity)")
-- add column depending on existing column
> data1$records<-ifelse(data1$cnt<10000,0,1)
-- add cumulative quantity
> data1$cumul=cumsum(data1$quantity)
-- add cumulative quantity frequency as character
> data1$cumulfreq = sprintf("%10.10f",100*data1$cumul/sum(data1$quantity))
-- add cumulative quantity frequency as numeric
> data1$cumulfreqnum = 100*data1$cumul/sum(data1$quantity)
> data1$cumulfreqnum = as.numeric(format(round(a, 2), nsmall = 2))

-- read data from postgres
> install.packages("RPostgreSQL")
trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.3/RPostgreSQL_0.6-2.zip'
Content type 'application/zip' length 433318 bytes (423 KB)
downloaded 423 KB

package ‘RPostgreSQL’ successfully unpacked and MD5 sums checked

The downloaded binary packages are in
	C:\Users\PC001\AppData\Local\Temp\Rtmp86jrzy\downloaded_packages
> library(RPostgreSQL)
Loading required package: DBI
> drv <- dbDriver("PostgreSQL")
> con <- dbConnect(drv, dbname = "project2",
                  host = "localhost", port = 5432,
                  user = "postgres", password = "postgres")
> dbListTables(con)
 [1] "spatial_ref_sys"   "topology"          "layer"             "ais_week2"        
 [5] "ais_week2_vessels" "ais_static"        "lux_1_151_026"     "lux2_1_151_026"   
 [9] "lux3_1_151_026"    "lux1_1_151_026"    "sent"              "ub"               
[13] "resp1"             "resp"              "data"              "datamodel"        
[17] "data1"             "data1clean"        "data1trans"        "datacountries"    
[21] "data1trans2"       "data1trans3"       "datacountry"       "datacountries2"   
> countrystats = dbReadTable(con, "datacountries2")
> View(countrystats)
> dbDisconnect(con)
[1] TRUE

-- transform data using library(sqldf)
> library(sqldf)
Loading required package: gsubfn
Loading required package: proto
Loading required package: RSQLite
sqldf will default to using PostgreSQL
> datacountries = sqldf("select a.*, b.code, b.pop2013, b.pop2014, b.pop2015, b.pop2016, b.gdp2013, b.gdp2014, b.gdp2015, b.gdp2016
	from data1 a
	join countrystats b on a.country = b.countryname2")

-- save and load rds
> saveRDS(datacountries, "C:/Users/PC001/Desktop/StoryTelling/gitRepo/data/datacountries.rds")
> datacountries = readRDS("C:/Users/PC001/Desktop/StoryTelling/gitRepo/data/datacountries.rds")

-- clear r variables
> rm(list= ls()[!(ls() %in% c('data'))])
