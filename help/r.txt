-- run app with shiny
> runApp("App-1")

-- display in showcase mode
> runApp("App-1", display.mode = "showcase")

-- load csv
> data= read.csv("C:/Users/PC001/Desktop/StoryTelling/gitRepo/data/data1trans2.csv")

-- shiny leaflet quick implementation
> app = shinyApp(
+   ui = fluidPage(leafletOutput('myMap')),
+   server = function(input, output) {
+     map = leaflet() %>% addProviderTiles(providers$CartoDB.Positron)
+     output$myMap = renderLeaflet(map)
+   }
+ )
-- render in browser
> if (interactive()) print(app)

-- shiny server import csv
  # import data from csv file ---
  output$contents <- renderTable({
    # checking for required file ---
    req(input$file1)
    # read uploaded file and save into local var ---
    data <- read.csv(input$file1$datapath,
                     header = input$header,
                     sep = input$sep,
                     quote = input$quote)
    head(data)
  })
-- shiny ui import csv
tabPanel("Import Data",
                              # Sidebar layout with input and output definitions ----
                              sidebarLayout(
                                # Sidebar panel for inputs ----
                                sidebarPanel(
                                  # Input: Select a file ----
                                  fileInput("file1", "Choose CSV File:",
                                            multiple = TRUE,
                                            accept = c("text/csv",
                                                       "text/comma-separated-values,text/plain",
                                                       ".csv")),
                                  # Input: Checkbox if file has header ----
                                  checkboxInput("header", "Header", TRUE),
                                  # Input: Select separator ----
                                  radioButtons("sep","Choose Separator:",
                                               choices = c(Comma = ",",
                                                           Semicolon = ";",
                                                           Tab = "\t"),
                                               selected = ","),
                                  # Input: Select quotes ----
                                  radioButtons("quote", "Choose Text Quotes:",
                                               choices = c(None = "",
                                                           "Double Quote" = '"',
                                                           "Single Quote" = "'"),
                                               selected = '"')
                                ),
                                # Main panel for displaying outputs ----
                                mainPanel(
                                  # Output: Data file ----
                                  tableOutput("contents")
                                )
                              )
                     )
					 
-- execute sql in dataframes
> library(sqldf)
> data1 = sqldf("select data.countryname2 country, data.lon, data.lat, count(*) cnt, sum(data.quantity) quantity from data group by data.countryname2, data.lon, data.lat order by sum(data.quantity)")
-- add column depending on existing column
> data1$records<-ifelse(data1$cnt<10000,0,1)
-- add cumulative quantity
> data1$cumul=cumsum(data1$quantity)
-- add cumulative quantity frequency as character
> data1$cumulfreq = sprintf("%10.10f",100*data1$cumul/sum(data1$quantity))
-- add cumulative quantity frequency as numeric
> data1$cumulfreqnum = 100*data1$cumul/sum(data1$quantity)
> data1$cumulfreqnum = as.numeric(format(round(a, 2), nsmall = 2))



-- save and load rds
> saveRDS(datacountries, "C:/Users/PC001/Desktop/StoryTelling/gitRepo/data/datacountries.rds")
> datacountries = readRDS("C:/Users/PC001/Desktop/StoryTelling/gitRepo/data/datacountries.rds")

-- clear r variables
> rm(list= ls()[!(ls() %in% c('data'))])


-- CREATE DATA INPUT 1 --
> library(RPostgreSQL)
Loading required package: DBI
> drv <- dbDriver("PostgreSQL")
> con <- dbConnect(drv, dbname = "project2",
                   host = "localhost", port = 5432,
                   user = "postgres", password = "postgres")
> datainput1 = dbGetQuery(con, "select a.*, b.cnt, b.sales_q, b.sales_c from data3country a join (select country, count(*) cnt, sum(sales) sales_c, sum(quantity) sales_q from data3trans1 where to_char(issuedate, 'YYYY') <> '2017' group by country) b on upper(a.country2) = b.country")
> dbDisconnect(con)

-- order
> datainput1 = datainput1[order(datainput1$sales_c),]
-- add cumulative 
> datainput1$cumul=cumsum(datainput1$sales_c)
-- add cumulative frequency as character
> datainput1$cumulfreqnum = 100*datainput1$cumul/sum(datainput1$sales_c)
> datainput1$cumulfreqnum = as.numeric(format(round(datainput1$cumulfreqnum, 2), nsmall = 2))

> saveRDS(datainput1, "C:/Users/PC001/Desktop/StoryTelling/gitRepo/data/datainput1.rds")
