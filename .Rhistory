forceNetwork(Links = datainputlinks, Nodes = datainputnodes, Source = "source",
Target = "target", Value = "linkvalue", NodeID = "nodeid",
Group = "nodegroup", opacity=0.89, legend=TRUE,fontSize=20, zoom=TRUE, linkDistance = JS("function(d){return d.value * 2}") )
forceNetwork(Links = datainputlinks, Nodes = datainputnodes, Source = "source",
Target = "target", Value = "linkvalue", NodeID = "nodeid",
Group = "nodegroup", opacity=0.89, fontSize=20, zoom=TRUE, linkDistance = JS("function(d){return d.value * 2}") )
forceNetwork(Links = datainputlinks, Nodes = datainputnodes, Source = "source",
Target = "target", Value = "linkvalue", NodeID = "nodeid",
Group = "nodegroup", opacity=0.89, fontSize=20, zoom=TRUE, linkDistance = JS("function(d){return d.value * 2}"), radiusCalculation = JS("Math.sqrt(d.nodesize)+6") )
forceNetwork(Links = datainputlinks, Nodes = datainputnodes, Source = "source",
Target = "target", Value = "linkvalue", NodeID = "nodeid",
Group = "nodegroup", opacity=0.89, fontSize=20, zoom=TRUE, linkDistance = JS("function(d){return d.value * 2}"), radiusCalculation = JS("Math.sqrt(d.nodegroup)+6") )
datainputlinks = dbGetQuery(con, "select b.id source, c.id target, linkvalue
from (
select distinct itemline source, itemcategory target, 5 linkvalue
from data3trans1
union all
select distinct itemcategory source, itemgroup target, 3 linkvalue
from data3trans1
union all
select distinct itemgroup source, itemsize target, 1 linkvalue
from data3trans1
) d
left join
(select a1.*, row_number() over ()-1 as id
from (
select distinct itemline nodeID, 1 nodeGroup
from data3trans1
union all
select distinct itemcategory nodeID, 2 nodeGroup
from data3trans1
union all
select distinct itemgroup nodeID, 3 nodeGroup
from data3trans1
union all
select distinct itemsize nodeID, 4 nodeGroup
from data3trans1
) a1) b on source=b.nodeid
left join
(select a2.*, row_number() over ()-1 as id
from (
select distinct itemline nodeID, 1 nodeGroup
from data3trans1
union all
select distinct itemcategory nodeID, 2 nodeGroup
from data3trans1
union all
select distinct itemgroup nodeID, 3 nodeGroup
from data3trans1
union all
select distinct itemsize nodeID, 4 nodeGroup
from data3trans1
) a2) c on target=c.nodeID")
forceNetwork(Links = datainputlinks, Nodes = datainputnodes, Source = "source",
Target = "target", Value = "linkvalue", NodeID = "nodeid",
Group = "nodegroup", opacity=10, fontSize=20, zoom=TRUE, linkDistance = JS("function(d){return d.value * 2}") )
forceNetwork(Links = datainputlinks, Nodes = datainputnodes, Source = "source",
Target = "target", Value = "linkvalue", NodeID = "nodeid",
Group = "nodegroup", opacity=10, fontSize=20, zoom=TRUE, linkDistance = JS("function(d){return d.value * 20}") )
forceNetwork(Links = datainputlinks, Nodes = datainputnodes, Source = "source",
Target = "target", Value = "linkvalue", NodeID = "nodeid",
Group = "nodegroup", opacity=10, fontSize=20, zoom=TRUE, linkDistance = JS("function(d){return d.value * 20}"), linkWidth = JS("function(d) { return Math.sqrt(d.value); }") )
forceNetwork(Links = datainputlinks, Nodes = datainputnodes, Source = "source",
Target = "target", Value = "linkvalue", NodeID = "nodeid",
Group = "nodegroup", opacity=10, fontSize=20, zoom=TRUE, linkDistance = JS("function(d){return d.value * 20}"), linkWidth = JS("function(d) { return d.value; }") )
forceNetwork(Links = datainputlinks, Nodes = datainputnodes, Source = "source",
Target = "target", Value = "linkvalue", NodeID = "nodeid",
Group = "nodegroup", opacity=10, fontSize=20, zoom=TRUE, linkDistance = JS("function(d){return d.value * 20}"), linkWidth = JS("function(d) { return Math.sqrt(d.value)*10; }") )
forceNetwork(Links = datainputlinks, Nodes = datainputnodes, Source = "source",
Target = "target", Value = "linkvalue", NodeID = "nodeid",
Group = "nodegroup", opacity=10, fontSize=20, zoom=TRUE, linkDistance = JS("function(d){return d.value * 20}"), linkWidth = JS("function(d) { return Math.sqrt(d.value)*1.1; }") )
forceNetwork(Links = datainputlinks, Nodes = datainputnodes, Source = "source",
Target = "target", Value = "linkvalue", NodeID = "nodeid",
Group = "nodegroup", opacity=10, fontSize=20, zoom=TRUE, linkDistance = JS("function(d){return d.value * 20}"), linkWidth = JS("function(d) { return Math.sqrt(d.value)*1.8; }") )
forceNetwork(Links = datainputlinks, Nodes = datainputnodes, Source = "source",
Target = "target", Value = "linkvalue", NodeID = "nodeid",
Group = "nodegroup", opacity=10, fontSize=20, zoom=TRUE, linkDistance = JS("function(d){return d.value * 20}"), linkWidth = JS("function(d) { return Math.sqrt(d.value)*1.5; }") )
forceNetwork(Links = datainputlinks, Nodes = datainputnodes, Source = "source",
Target = "target", Value = "linkvalue", NodeID = "nodeid",
Group = "nodegroup", opacity=10, fontSize=20, zoom=TRUE, linkDistance = JS("function(d){return d.value * 50}"), linkWidth = JS("function(d) { return Math.sqrt(d.value)*1.5; }") )
forceNetwork(Links = datainputlinks, Nodes = datainputnodes, Source = "source",
Target = "target", Value = "linkvalue", NodeID = "nodeid",
Group = "nodegroup", opacity=1, fontSize=20, zoom=TRUE, linkDistance = JS("function(d){return d.value * 50}"), linkWidth = JS("function(d) { return Math.sqrt(d.value)*1.5; }") )
rm(list= ls()[!(ls() %in% c('datainput1','con','drv'))])
datainput2links = dbGetQuery(con, "-- links
select b.id source, c.id target, linkvalue
from (
select distinct itemline source, itemcategory target, 5 linkvalue
from data3trans1
union all
select distinct itemcategory source, itemgroup target, 3 linkvalue
from data3trans1
union all
select distinct itemgroup source, itemsize target, 1 linkvalue
from data3trans1
) d
left join
(select a1.*, row_number() over ()-1 as id
from (
select distinct itemline nodeID, 1 nodeGroup
from data3trans1
union all
select distinct itemcategory nodeID, 2 nodeGroup
from data3trans1
union all
select distinct itemgroup nodeID, 3 nodeGroup
from data3trans1
union all
select distinct itemsize nodeID, 4 nodeGroup
from data3trans1
) a1) b on source=b.nodeid
left join
(select a2.*, row_number() over ()-1 as id
from (
select distinct itemline nodeID, 1 nodeGroup
from data3trans1
union all
select distinct itemcategory nodeID, 2 nodeGroup
from data3trans1
union all
select distinct itemgroup nodeID, 3 nodeGroup
from data3trans1
union all
select distinct itemsize nodeID, 4 nodeGroup
from data3trans1
) a2) c on target=c.nodeID;")
datainput2nodes = dbGetQuery(con, "-- nodes select a.*, row_number() over () -1 as id
from (
select distinct itemline nodeID, 1 nodeGroup
from data3trans1
union all
select distinct itemcategory nodeID, 2 nodeGroup
from data3trans1
union all
select distinct itemgroup nodeID, 3 nodeGroup
from data3trans1
union all
select distinct itemsize nodeID, 4 nodeGroup
from data3trans1
) a;")
datainput2nodes = dbGetQuery(con, "-- nodes
select a.*, row_number() over () -1 as id
from (
select distinct itemline nodeID, 1 nodeGroup
from data3trans1
union all
select distinct itemcategory nodeID, 2 nodeGroup
from data3trans1
union all
select distinct itemgroup nodeID, 3 nodeGroup
from data3trans1
union all
select distinct itemsize nodeID, 4 nodeGroup
from data3trans1
) a;")
forceNetwork(Links = datainput2links, Nodes = datainput2nodes, Source = "source",
Target = "target", Value = "linkvalue", NodeID = "nodeid",
Group = "nodegroup", opacity=0.89, fontSize=20, zoom=TRUE, linkDistance = JS("function(d){return d.value * 2}"), radiusCalculation = JS("Math.sqrt(d.nodegroup)+6") )
forceNetwork(Links = datainputlinks, Nodes = datainputnodes, Source = "source",
Target = "target", Value = "linkvalue", NodeID = "nodeid",
Group = "nodegroup", opacity=1, fontSize=20, zoom=TRUE, linkDistance = JS("function(d){return d.value * 50}"), linkWidth = JS("function(d) { return Math.sqrt(d.value)*1.5; }") )
forceNetwork(Links = datainput2links, Nodes = datainput2nodes, Source = "source",
Target = "target", Value = "linkvalue", NodeID = "nodeid",
Group = "nodegroup", opacity=1, fontSize=20, zoom=TRUE, linkDistance = JS("function(d){return d.value * 50}"), linkWidth = JS("function(d) { return Math.sqrt(d.value)*1.5; }") )
forceNetwork(Links = datainput2links, Nodes = datainput2nodes, Source = "source",
Target = "target", Value = "linkvalue", NodeID = "nodeid",
Group = "nodegroup", opacity=1, fontSize=20, zoom=TRUE, linkDistance = JS("function(d){return d.value * 50}"), linkWidth = JS("function(d) { return Math.sqrt(d.value)*1.5; }") )
saveRDS(datainput2links, "C:/Users/PC001/Desktop/StoryTelling/gitRepo/data/datainput2links.rds")
saveRDS(datainput2nodes, "C:/Users/PC001/Desktop/StoryTelling/gitRepo/data/datainput2nodes.rds")
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
datainput1 = readRDS("data/datainput1.rds")
getwd()
setwd("C:/Users/PC001/Desktop/StoryTelling/gitRepo")
datainput1 = readRDS("data/datainput1.rds")
View(datainput1)
runApp()
datainput1 = dbGetQuery(con, "select a.*, b.cnt, b.sales_q, b.sales_c from data3country a join (select country, count(*) cnt, sum(sales) sales_c, sum(quantity) sales_q from data3trans1 where to_char(issuedate, 'YYYY') <> '2017' group by country) b on upper(a.country2) = b.country")
runApp()
datainput1 = datainput1[order(datainput1$sales_c),]
datainput1 = datainput1[order(datainput1$sales_c),]
View(datainput1)
datainput1 = dbGetQuery(con, "select a.*, b.cnt, b.sales_q, b.sales_c from data3country a join (select country, count(*) cnt, sum(sales) sales_c, sum(quantity) sales_q from data3trans1 where to_char(issuedate, 'YYYY') <> '2017' group by country) b on upper(a.country2) = b.country")
datainput1 = datainput1[order(datainput1$sales_c),]
datainput1$cumul=cumsum(datainput1$sales_c)
datainput1$cumulfreqnum = 100*datainput1$cumul/sum(datainput1$sales_c)
datainput1$cumulfreqnum = as.numeric(format(round(datainput1$cumulfreqnum, 2), nsmall = 2))
saveRDS(datainput1, "C:/Users/PC001/Desktop/StoryTelling/gitRepo/data/datainput1.rds")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
forceNetwork(
Links = datainput2links,
Nodes = datainput2nodes,
Source = "source",
Target = "target",
Value = "linkvalue",
NodeID = "nodeid",
Group = "nodegroup",
opacity = 1,
fontSize = 20,
zoom = TRUE,
linkDistance = JS("function(d){return d.value * 20}"),
linkWidth = JS("function(d) { return Math.sqrt(d.value)*1.5; }")
)
runApp()
runApp()
datainput2links = dbGetQuery(con, "-- links
select b.id source, c.id target, linkvalue
from (
select distinct itemline source, itemcategory target, 5 linkvalue
from data3trans1
union all
select distinct itemcategory source, itemgroup target, 3 linkvalue
from data3trans1
union all
select distinct itemgroup source, itemsize target, 1 linkvalue
from data3trans1
) d
left join
(select a1.*, row_number() over ()-1 as id
from (
select distinct itemline nodeID, item_line nodeGroup
from data3trans1
union all
select distinct itemcategory nodeID, item_category nodeGroup
from data3trans1
union all
select distinct itemgroup nodeID, item_group nodeGroup
from data3trans1
union all
select distinct itemsize nodeID, item_size nodeGroup
from data3trans1
) a1) b on source=b.nodeid
left join
(select a2.*, row_number() over ()-1 as id
from (
select distinct itemline nodeID, item_line nodeGroup
from data3trans1
union all
select distinct itemcategory nodeID, item_category nodeGroup
from data3trans1
union all
select distinct itemgroup nodeID, item_group nodeGroup
from data3trans1
union all
select distinct itemsize nodeID, item_size nodeGroup
from data3trans1
) a2) c on target=c.nodeID;")
datainput2nodes = dbGetQuery(con, "-- nodes
select a.*, row_number() over () -1 as id
from (
select distinct itemline nodeID, item_line nodeGroup
from data3trans1
union all
select distinct itemcategory nodeID, item_category nodeGroup
from data3trans1
union all
select distinct itemgroup nodeID, item_group nodeGroup
from data3trans1
union all
select distinct itemsize nodeID, item_size nodeGroup
from data3trans1
) a;")
forceNetwork(Links = datainput2links, Nodes = datainput2nodes, Source = "source",
Target = "target", Value = "linkvalue", NodeID = "nodeid",
Group = "nodegroup", opacity=1, fontSize=20, zoom=TRUE, linkDistance = JS("function(d){return d.value * 20}"), linkWidth = JS("function(d) { return Math.sqrt(d.value)*1.5; }"), legend = TRUE )
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "project2",
host = "localhost", port = 5432,
user = "postgres", password = "postgres")
datainput2links = dbGetQuery(con, "-- links
select b.id source, c.id target, linkvalue
from (
select distinct itemline source, itemcategory target, 5 linkvalue
from data3trans1
union all
select distinct itemcategory source, itemgroup target, 3 linkvalue
from data3trans1
union all
select distinct itemgroup source, itemsize target, 1 linkvalue
from data3trans1
) d
left join
(select a1.*, row_number() over ()-1 as id
from (
select distinct itemline nodeID, item_line nodeGroup
from data3trans1
union all
select distinct itemcategory nodeID, item_category nodeGroup
from data3trans1
union all
select distinct itemgroup nodeID, item_group nodeGroup
from data3trans1
union all
select distinct itemsize nodeID, item_size nodeGroup
from data3trans1
) a1) b on source=b.nodeid
left join
(select a2.*, row_number() over ()-1 as id
from (
select distinct itemline nodeID, item_line nodeGroup
from data3trans1
union all
select distinct itemcategory nodeID, item_category nodeGroup
from data3trans1
union all
select distinct itemgroup nodeID, item_group nodeGroup
from data3trans1
union all
select distinct itemsize nodeID, item_size nodeGroup
from data3trans1
) a2) c on target=c.nodeID;")
datainput2links = dbGetQuery(con, "-- links
select b.id source, c.id target, linkvalue
from (
select distinct itemline source, itemcategory target, 5 linkvalue
from data3trans1
union all
select distinct itemcategory source, itemgroup target, 3 linkvalue
from data3trans1
union all
select distinct itemgroup source, itemsize target, 1 linkvalue
from data3trans1
) d
left join
(select a1.*, row_number() over ()-1 as id
from (
select distinct itemline nodeID, 'Product Line' nodeGroup
from data3trans1
union all
select distinct itemcategory nodeID, 'Product Category' nodeGroup
from data3trans1
union all
select distinct itemgroup nodeID, 'Product Name' nodeGroup
from data3trans1
union all
select distinct itemsize nodeID, 'Product Size' nodeGroup
from data3trans1
) a1) b on source=b.nodeid
left join
(select a2.*, row_number() over ()-1 as id
from (
select distinct itemline nodeID, 'Product Line' nodeGroup
from data3trans1
union all
select distinct itemcategory nodeID, 'Product Category' nodeGroup
from data3trans1
union all
select distinct itemgroup nodeID, 'Product Name' nodeGroup
from data3trans1
union all
select distinct itemsize nodeID, 'Product Size' nodeGroup
from data3trans1
) a2) c on target=c.nodeID;")
datainput2nodes = dbGetQuery(con, "-- nodes
select a.*, row_number() over () -1 as id
from (
select distinct itemline nodeID, 'Product Line' nodeGroup
from data3trans1
union all
select distinct itemcategory nodeID, 'Product Category' nodeGroup
from data3trans1
union all
select distinct itemgroup nodeID, 'Product Name' nodeGroup
from data3trans1
union all
select distinct itemsize nodeID, 'Product Size' nodeGroup
from data3trans1
) a;")
forceNetwork(Links = datainput2links, Nodes = datainput2nodes, Source = "source",
Target = "target", Value = "linkvalue", NodeID = "nodeid",
Group = "nodegroup", opacity=1, fontSize=20, zoom=TRUE, linkDistance = JS("function(d){return d.value * 20}"), linkWidth = JS("function(d) { return Math.sqrt(d.value)*1.5; }"), legend = TRUE )
saveRDS(datainput2links, "C:/Users/PC001/Desktop/StoryTelling/gitRepo/data/datainput2links.rds")
saveRDS(datainput2nodes, "C:/Users/PC001/Desktop/StoryTelling/gitRepo/data/datainput2nodes.rds")
runApp()
runApp()
runApp()
runApp('C:/Users/PC001/Desktop/shiny-examples-master/118-highcharter-births')
a = births %>%
filter(between(year, input$year[1], input$year[2])) %>%
filter(date_of_month %in% c(6, 13, 20)) %>%
mutate(day = ifelse(date_of_month == 13, "thirteen", "not_thirteen")) %>%
group_by(day_of_week, day) %>%
summarise(mean_births = mean(births)) %>%
arrange(day_of_week) %>%
spread(day, mean_births) %>%
mutate(diff_ppt = ((thirteen - not_thirteen) / not_thirteen) * 100)
setwd("C:/Users/PC001/Desktop/shiny-examples-master/118-highcharter-births")
births <- read.csv("data/births.csv")
years <- unique(births$year)
View(births)
years
a =births %>%
filter(between(year, input$year[1], input$year[2])) %>%
filter(date_of_month %in% c(6, 13, 20)) %>%
mutate(day = ifelse(date_of_month == 13, "thirteen", "not_thirteen")) %>%
group_by(day_of_week, day) %>%
summarise(mean_births = mean(births)) %>%
arrange(day_of_week) %>%
spread(day, mean_births) %>%
mutate(diff_ppt = ((thirteen - not_thirteen) / not_thirteen) * 100)
a =births %>%
filter(between(year, 1994, 2014)) %>%
filter(date_of_month %in% c(6, 13, 20)) %>%
mutate(day = ifelse(date_of_month == 13, "thirteen", "not_thirteen")) %>%
group_by(day_of_week, day) %>%
summarise(mean_births = mean(births)) %>%
arrange(day_of_week) %>%
spread(day, mean_births) %>%
mutate(diff_ppt = ((thirteen - not_thirteen) / not_thirteen) * 100)
a
View(a)
runApp()
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
rm(list= ls())
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "project2",
host = "localhost", port = 5432,
user = "postgres", password = "postgres")
datainput0 = dbGetQuery(con, "select data3trans1;")
datainput0 = dbGetQuery(con, "select data3trans1;")
datainput0 = dbGetQuery(con, "select * from data3trans1;")
#-- save rds
saveRDS(
datainput0,
"C:/Users/PC001/Desktop/StoryTelling/gitRepo/data/datainput0.rds"
)
View(datainput0)
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
getwd()
setwd("C:/Users/PC001/Desktop/StoryTelling/gitRepo")
runApp('C:/Users/PC001/Desktop/shiny-examples-master/016-knitr-pdf')
runApp()
runApp()
View(datainput0)
View(datainput1)
View(datainput2links)
View(datainput2nodes)
View(datainput2links)
View(datainput2nodes)
View(datainput2links)
getwd()
write.table(data3trans1, file = "C:/Users/PC001/Desktop/data3trans1.csv", append = FALSE, quote = TRUE, sep = ";",
eol = "\n", na = "NA", dec = ".", row.names = TRUE,
col.names = TRUE, qmethod = c("escape", "double"),
fileEncoding = "")
write.table(datainput0, file = "C:/Users/PC001/Desktop/datainput0.csv", append = FALSE, quote = TRUE, sep = ";",
eol = "\n", na = "NA", dec = ".", row.names = TRUE,
col.names = TRUE, qmethod = c("escape", "double"),
fileEncoding = "")
shiny::runApp('C:/Users/PC001/Desktop/shiny-examples-master/118-highcharter-births')
runApp()
runApp()
View(datainput0)
ggplot(datainput0, aes(x=sales, y=quantity)) +
geom_point()+
geom_smooth()
install.packages('mgc')
ggplot(datainput0, aes(x=sales, y=quantity)) +
geom_point()
ggplot(datainput0, aes(x=sales, y=quantity, color=issueyear)) +
geom_point()
ggplot(datainput0, aes(x=issuedate, y=quantity, color=issueyear)) +
geom_point()
ggplot(datainput0, aes(sales,colour=issueyear,fill=issueyear)) + geom_density(alpha=0.6)
ggplot(datainput0, aes(sales,colour=issueyear,fill=issueyear)) + geom_boxplot()
ggplot(datainput0, aes(x=sales,y=issueyear,fill=issueyear)) + geom_boxplot()
ggplot(datainput0, aes(x=issueyear,y=sales,fill=issueyear)) + geom_boxplot()
ggplot(datainput0, aes(sales,colour=issueyear,fill=issueyear)) + geom_density(alpha=0.6)
ggplot(datainput0, aes(sales,colour=issueyear,fill=issueyear)) + geom_density(alpha=0.6) + xlim(c(0,10000))
ggplot(datainput0, aes(sales,colour=issueyear,fill=issueyear)) + geom_density(adjust=1.5, position = 'fill', alpha=0.6) + xlim(c(0,10000))
ggplot(datainput0, aes(sales,colour=issueyear,fill=issueyear)) + geom_density(adjust=1.5, alpha=0.6) + xlim(c(0,10000))
ggplot(datainput0, aes(sales) + geom_histogram(binwidth = 0.2, color="white", fill=rgb(0.2,0.7,0.1,0.4)) + xlim(c(0,10000))
ggplot(datainput0, aes(sales) + geom_histogram(binwidth = 0.2, color="white", fill=rgb(0.2,0.7,0.1,0.4))
ggplot(datainput0, aes(sales)) + geom_histogram(binwidth = 0.2, color="white", fill=rgb(0.2,0.7,0.1,0.4))
ggplot(datainput0, aes(sales)) + geom_histogram(binwidth = 5000, color="white", fill=rgb(0.2,0.7,0.1,0.4)) + xlim(c(0,10000))
ggplot(datainput0, aes(sales)) + geom_histogram(binwidth = 50, color="white", fill=rgb(0.2,0.7,0.1,0.4)) + xlim(c(0,10000))
ggplot(datainput0, aes(issuedate)) + geom_histogram(binwidth = 50000, color="white", fill=rgb(0.2,0.7,0.1,0.4))
ggplot(datainput0, aes(issuedate)) + geom_histogram(binwidth = 500, color="white", fill=rgb(0.2,0.7,0.1,0.4))
ggplot(datainput0, aes(issuedate)) + geom_histogram(binwidth = 50, color="white", fill=rgb(0.2,0.7,0.1,0.4))
ggplot(datainput0, aes(issuedate)) + geom_histogram(binwidth = 25, color="white", fill=rgb(0.2,0.7,0.1,0.4))
ggplot(datainput0, aes(issuedate)) + geom_histogram(binwidth = 25, color=itemgroup, fill=rgb(0.2,0.7,0.1,0.4))
ggplot(datainput0, aes(issuedate, color=itemgroup)) + geom_histogram(binwidth = 25, color="white", fill=rgb(0.2,0.7,0.1,0.4))
ggplot(datainput0, aes(fill=itemgroup, y=sales, x=issueyear)) + geom_histogram(binwidth = 25, color=itemgroup, fill=rgb(0.2,0.7,0.1,0.4))
ggplot(datainput0, aes(fill=itemgroup, y=sales, x=issueyear)) + geom_bar(position="dodge", stat="identity")
ggplot(datainput0, aes(fill=itemsize, y=sales, x=issueyear)) + geom_bar(position="dodge", stat="identity")
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(
drv,
dbname = "project2",
host = "localhost",
port = 5432,
user = "postgres",
password = "postgres"
)
datainput0 = dbGetQuery(con, "select * from data3trans2;")
dbDisconnect(con)
saveRDS(
datainput0,
"C:/Users/PC001/Desktop/StoryTelling/gitRepo/data/datainput0.rds"
)
ggplot(datainput0, aes(fill=itemsizerank, y=sales, x=issueyear)) + geom_bar(position="dodge", stat="identity")
ggplot(datainput0, aes(fill=itemsizerank, y=sales, x=issueyear)) + geom_bar(position="dodge", stat="identity") + ylim(c(0,10000))
runApp()
getwd()
