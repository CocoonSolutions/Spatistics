host = "localhost", port = 5432,
user = "postgres", password = "postgres")
countrystats = dbReadTable(con, "data2country")
View(countrystats)
View(data)
data = dbReadTable(con, "data2trans1")
dbDisconnect(con)
library(sqldf)
datainput1 = sqldf("
select a.*, b.cnt, b.sales_q, b.sales_c
from countrystats
join (
select
country,
count(*) cnt,
sum(sales_c) sales_c,
sum(sales_q) sales_q
from data
group by country ) b
on a.country2 = b.country")
library(sqldf)
datainput1 = sqldf("
select a.*, b.cnt, b.sales_q, b.sales_c
from countrystats
join (
select
country,
count(*) cnt,
sum(sales_c) sales_c,
sum(sales_q) sales_q
from data
group by country ) b
on a.country2 = b.country")
library(sqldf)
datainput1 = sqldf("
select a.*, b.cnt, b.sales_q, b.sales_c
from countrystats
join (
select
country,
count(*) cnt,
sum(sales_c) sales_c,
sum(sales_q) sales_q
from data
group by country ) b
on a.country2 = b.country")
rm(con)
rm(drv)
datainput1 = sqldf("select a.*, b.cnt, b.sales_q, b.sales_c from countrystats join (select country, count(*) cnt, sum(sales_c) sales_c, sum(sales_q) sales_q from data group by country ) b on a.country2 = b.country")
datainput1 = sqldf("select a.*, b.cnt, b.sales_q, b.sales_c from countrystats join (select country, count(*) cnt, sum(sales_c) sales_c, sum(sales_q) sales_q from data group by country ) b on a.country2 = b.country")
datainput1 = sqldf("select country, count(*) cnt, sum(sales_c) sales_c, sum(sales_q) sales_q from data group by country")
library(RPostgreSQL
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "project2",
+                   host = "localhost", port = 5432,
+                   user = "postgres", password = "postgres")
con <- dbConnect(drv, dbname = "project2",
host = "localhost", port = 5432,
user = "postgres", password = "postgres")
df_postgres <- dbGetQuery(con, "SELECT * from data2trans1")
rm(df_postgres)
datainput1 = dbGetQuery(con, "select a.*, b.cnt, b.sales_q, b.sales_c from data2country join (select country, count(*) cnt, sum(sales_c) sales_c, sum(sales_q) sales_q from data2trans1 group by country ) b on a.country2 = b.country")
datainput1 = dbGetQuery(con, "select a.*, b.cnt, b.sales_q, b.sales_c from data2country a join (select country, count(*) cnt, sum(sales_c) sales_c, sum(sales_q) sales_q from data2trans1 group by country) b on a.country2 = b.country")
View(datainput1)
View(datacountries)
datainput1 = dbGetQuery(con, "select a.*, b.cnt, b.sales_q, b.sales_c from data2country a join (select country, count(*) cnt, sum(sales_c) sales_c, sum(sales_q) sales_q from data2trans1 group by country) b on upper(a.country2) = b.country")
View(datainput1)
dbDisconnect(con)
View(datacountries)
shiny::runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
datainput1 <- datainput1[order(sales_c),]
View(datainput1)
datainput1 <- datainput1[order(sales_c),]
datainput1$sales_c
datainput1 = datainput1[order(sales_c),]
datainput1 = datainput1[order(datainput1$sales_c),]
datainput1$cumul=cumsum(datainput1$sales_c)
datainput1$cumulfreqnum = 100*data1$cumul/sum(data1$quantity)
datainput1$cumulfreqnum = 100*datainput1$cumul/sum(datainput1$sales_c)
datainput1$cumulfreqnum = as.numeric(format(round(a, 2), nsmall = 2))
datainput1$cumulfreqnum = as.numeric(format(round(datainput1$cumulfreqnum, 2), nsmall = 2))
saveRDS(datainput1, "C:/Users/PC001/Desktop/StoryTelling/gitRepo/data/datainput1.rds")
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
rm(list= ls())
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "project2",
host = "localhost", port = 5432,
user = "postgres", password = "postgres")
datainput1 = dbGetQuery(con, "select a.*, b.cnt, b.sales_q, b.sales_c from data3country a join (select country, count(*) cnt, sum(sales) sales_c, sum(quantity) sales_q from data3trans1 where to_char(issuedate, 'YYYY') <> '2017' group by country) b on upper(a.country2) = b.country")
dbDisconnect(con)
datainput1 = datainput1[order(datainput1$sales_c),]
datainput1$cumul=cumsum(datainput1$sales_c)
datainput1$cumulfreqnum = 100*datainput1$cumul/sum(datainput1$sales_c)
datainput1$cumulfreqnum = as.numeric(format(round(datainput1$cumulfreqnum, 2), nsmall = 2))
saveRDS(datainput1, "C:/Users/PC001/Desktop/StoryTelling/gitRepo/data/datainput1.rds")
shiny::runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
data(AirPassengers)
class(AirPassengers)
start(AirPassengers)
end(AirPassengers)
frequency(AirPassengers)
summary(AirPassengers)
plot(AirPassengers)
cycle(AirPassengers)
plot(aggregate(AirPassengers,FUN=mean))
boxplot(AirPassengers~cycle(AirPassengers))
plot(AirPassengers)
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
library('tseries')
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
myts <- ts(myvector, start=c(2009, 1), end=c(2014, 12), frequency=12)
myts <- ts(myvector, start=c(2009, 1), end=c(2014, 12), frequency=12)
a01 = sqldf(
"Select issueyearmon, sum(sales) sales from datainput3 where issueyearmon <> '2017-08' Group By issueyearmon order by issueyearmon"
)
library('sqldf')
datainput3 = readRDS("data/datainput3.rds")
datainput3 = readRDS("data/datainput3.rds")
setwd("C:/Users/PC001/Desktop/StoryTelling/gitRepo")
datainput3 = readRDS("data/datainput3.rds")
a01 = sqldf(
"Select issueyearmon, sum(sales) sales from datainput3 where issueyearmon <> '2017-08' Group By issueyearmon order by issueyearmon"
)
library('sqldf')
a01 = sqldf(
"Select issueyearmon, sum(sales) sales from datainput3 where issueyearmon <> '2017-08' Group By issueyearmon order by issueyearmon"
)
rm(list = ls()[!(ls() %in% c('datainput0','datainput1','datainput2links','datainput2nodes','datainput3'))])
a01 = sqldf(
"Select issueyearmon, sum(sales) sales from datainput3 where issueyearmon <> '2017-08' Group By issueyearmon order by issueyearmon"
)
shiny::runApp()
runApp()
shiny::runApp()
runApp()
plot.ts(birthstimeseries)
a01 = sqldf(
"Select issueyearmon, sum(sales) sales from datainput3 where issueyearmon <> '2017-08' Group By issueyearmon order by issueyearmon"
)
a01$ts = ts(
a01$sales,
start = c(2013, 1),
end = c(2017, 7),
frequency = 12
)
View(a01)
plot(a01$)
View(a01)
plot.ts(a01)
plot.ts(a01$ts,a01$sales)
a = ts(
a01$sales,
start = c(2013, 1),
end = c(2017, 7),
frequency = 12
)
a
a.frequency
type(a)
typeof(a)
plot.ts(a)
a
summary(a)
a
saleslog=log(a01$sales)
alog = ts(
a01$saleslog,
start = c(2013, 1),
end = c(2017, 7),
frequency = 12
)
alog = ts(
saleslog,
start = c(2013, 1),
end = c(2017, 7),
frequency = 12
)
plot(alog)
install.packages("TTR")
install.packages("TTR")
asma <- SMA(a,n=8)
library('TTR')
library('TTR')
install.packages("TTR")
install.packages("TTR")
library('TTR')
asma <- SMA(a,n=8)
plot.ts(SMA(a,n=4))
plot.ts(SMA(a,n=0))
plot.ts(SMA(a,n=1))
plot.ts(a)
plot.ts(SMA(a,n=2))
plot.ts(SMA(a,n=3))
plot.ts(SMA(a,n=4))
plot.ts(SMA(a,n=15))
plot.ts(SMA(a,n=20))
plot.ts(SMA(a,n=50))
plot.ts(SMA(a,n=n))
plot.ts(SMA(a,n=3))
plot.ts(SMA(a,n=8))
decompose(a)
decompose(a).x
decompose(a)$x
decompose(a)$seasonal
plot.ts(decompose(a)$seasonal)
plot(decompose(a))
decompose(a)$seasonal
decompose(a)$trend
a01$ts = ts(
a01$sales,
start = c(2013, 1),
end = c(2017, 7),
frequency = 12
)
d.arima <- auto.arima(a01$ts)
x <- forecast(d.arima, level = c(95, 80), h = 12)
hchart(x)
library('networkD3')
library("highcharter")
library('sqldf')
library('forecast')
d.arima <- auto.arima(a01$ts)
x <- forecast(d.arima, level = c(95, 80), h = 12)
hchart(x)
shiny::runApp()
runApp()
runApp()
shiny::runApp()
highchart() %>%
hc_chart(zoomType = "xy") %>%
hc_add_series(
dataLabels = list(enabled = TRUE,
format = "{point.label}"),
data = datainput1,
hcaes(
x = gdp2016,
y = pop2016,
z = sales_c,
group = salesGroup
),
color = c('#434348', '#7cb5ec', '#90ed7d'),
type = "scatter"
) %>%
hc_tooltip(
useHTML = TRUE,
headerFormat = "<table>",
pointFormat = paste(
"<tr><th colspan=\"1\"><b>{point.label}</b></th></tr>",
"<tr><th>Country</th><td>{point.country}</td></tr>",
"<tr><th>GDP 2016</th><td>{point.x} euros</td></tr>",
"<tr><th>Population 2016</th><td>{point.y} people</td></tr>",
"<tr><th>Total Sales</th><td>{point.z} euros</td></tr>"
),
footerFormat = "</table>"
)
runApp()
runApp()
"The company has 38 point of sales all over the world. Each point represents a country from Australia to America. Top 10 countries in sales are Italy, France, Greece, Portugal, Spain, Great Britain, Germany, USA, Holland and Romania. Betwwen period from January of 2013 to December of 2017, these 10 countries held almost 90% of total sales (~535 million)."
),
highchartOutput("highchart71", width = "100%", height = "400px"),
h4(
"2Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
),
highchartOutput("highchart72", width = "100%", height = "400px")
)
),
# ----------------------------------------
# Point 8 --------------------------------
# ----------------------------------------
fluidRow(
shiny::column(
width = 12,
h2(
span(". ", style = "background-color:#66a3ff; color:#66a3ff; font-size: 120%;"),
span("8 ", style = "background-color:#66a3ff; font-size: 120%; color:#ffffff;"),
span(".", style = "background-color:#66a3ff; color:#66a3ff; font-size: 120%;"),
span("-", style = "color:white; font-size: 120%;"),
"Mapping and classification analysis of destinations"
),
h4(
"66% of total sales came from 13,5% of countries. map etc, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
),
leafletOutput("map", "100%", "400px"),
br()
,
fluidRow(shiny::column(
width = 12,
fluidRow(
shiny::column(width = 6,
selectInput("color", "Color", vars, selected = "cnt")),
shiny::column(width = 6,
selectInput("size", "Size", vars, selected = "sales_c"))
)
)),
fluidRow(
shiny::column(
width = 12,
conditionalPanel(
"input.color == 'cumulfreqnum'",
# Only prompt for threshold when coloring or sizing by sales_q
numericInput("threshold", "Cumulative Sales threshold", 50)
),
plotOutput("histCentile", height = 200),
h4(
"66% of total sales came from 13,5% of countries. map etc, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
),
plotOutput("scatterCollegeIncome", height = 250),
h4(
"3Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
)
)
)
)
),
# ----------------------------------------
# Point 9 --------------------------------
# ----------------------------------------
fluidRow(shiny::column(
width = 12,
h2(
span(". ", style = "background-color:#66a3ff; color:#66a3ff; font-size: 120%;"),
span("9 ", style = "background-color:#66a3ff; font-size: 120%; color:#ffffff;"),
span(".", style = "background-color:#66a3ff; color:#66a3ff; font-size: 120%;"),
span("-", style = "color:white; font-size: 120%;"),
"Sales forecast for 2018"
),
h4(
"2Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
),
highchartOutput("highchartforecast", width = "100%", height = "400px")
)),
# ----------------------------------------
# Conclusion -----------------------------
# ----------------------------------------
fluidRow(
shiny::column(
width = 12,
h2(
span(". ", style = "background-color:#66a3ff; color:#66a3ff; font-size: 120%;"),
span("> ", style = "background-color:#66a3ff; font-size: 120%; color:#ffffff;"),
span(".", style = "background-color:#66a3ff; color:#66a3ff; font-size: 120%;"),
span("-", style = "color:white; font-size: 120%;"),
"Aquaculture is a dynamic industry with potentials in technology..."
),
p("p creates a paragraph of text."),
p(
"A new p() command starts a new paragraph. Supply a style attribute to change the format of the entire paragraph."
),
strong("strong() makes bold text."),
em("em() creates italicized (i.e, emphasized) text."),
br(),
code("code displays your text similar to computer code"),
div(
"div creates segments of text with a similar style. This division of text is all #66a3ff because I passed the argument 'style = color:#66a3ff' to div",
style = "color:#66a3ff"
),
br(),
p(
"span does the same thing as div, but it works with",
span("groups of words", style = "color:#66a3ff"),
"that appear inside a paragraph."
),
hr(),
p(
h5(
"*The data have been collected from an Aquaculture Company Group located in Greece and refer to information about the orders of the company, amount of sales and quantity of fish, in the period between 1.1.2013 and 22.8.2017. Latest update: 24.9.2017"
)
),
p(
h5(
"**FAO, (2016). The State of World Fisheries and Aquaculture 2016, FAO.Contributing to food security and nutrition for all. Rome, 200 pp."
)
)
)
)
),
shiny::column(width = 3)
),
# 3 ---
fluidRow(shiny::column(
width = 12,
img(
src = "Untitled-4.jpg",
height = "100%",
width = "100%"
)
))
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(datainput1)
runApp()
View(datainput0)
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(
drv,
dbname = "project2",
host = "localhost",
port = 5432,
user = "postgres",
password = "postgres"
)
datainput1 = dbGetQuery(
con,
"select a.*, b.cnt, b.sales_q, b.sales_c from data3country a join (select country, count(*) cnt, sum(sales) sales_c, sum(quantity) sales_q from data3trans1 where to_char(issuedate, 'YYYY') = '2016' group by country) b on upper(a.country2) = b.country"
)
dbDisconnect(con)
datainput1 = datainput1[order(datainput1$sales_c),]
datainput1$cumul = cumsum(datainput1$sales_c)
datainput1$cumulfreqnum = 100 * datainput1$cumul / sum(datainput1$sales_c)
datainput1$cumulfreqnum = as.numeric(format(round(datainput1$cumulfreqnum, 2), nsmall = 2))
runApp()
saveRDS(datainput1,"C:/Users/PC001/Desktop/StoryTelling/gitRepo/data/datainput1.rds")
runApp()
runApp()
runApp()
library('sqldf')
library("dplyr")
runApp()
a01 = sqldf(
"Select issueyearmon, sum(sales) sales from datainput3 where issueyearmon <> '2017-08' Group By issueyearmon order by issueyearmon"
)
dbDisconnect(con)
install.packages("sqldf")
a01 = sqldf(
"Select issueyearmon, sum(sales) sales from datainput3 where issueyearmon <> '2017-08' Group By issueyearmon order by issueyearmon"
)
library('sqldf')
shiny::runApp()
View(datainput1)
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(
drv,
dbname = "project2",
host = "localhost",
port = 5432,
user = "postgres",
password = "postgres"
)
datainput1 = dbGetQuery(
con,
"select a.*, b.cnt, b.sales_q, b.sales_c from data3country a join (select country, count(*) cnt, sum(sales) sales_c, sum(quantity) sales_q from data3trans1 where to_char(issuedate, 'YYYY') = '2016' group by country) b on upper(a.country2) = b.country"
)
View(datainput1)
dbDisconnect(con)
datainput1 = datainput1[order(datainput1$sales_c),]
#-- add cumulative
datainput1$cumul = cumsum(datainput1$sales_c)
#-- add cumulative frequency as character
datainput1$cumulfreqnum = 100 * datainput1$cumul / sum(datainput1$sales_c)
datainput1$cumulfreqnum = as.numeric(format(round(datainput1$cumulfreqnum, 2), nsmall = 2))
#-- save rds
saveRDS(datainput1,"C:/Users/PC001/Desktop/StoryTelling/gitRepo/data/datainput1.rds")
View(datainput1)
install.packages("sqldf")
install.packages("sqldf")
shiny::runApp()
View(datainput1)
runApp()
datainput1_legacy = readRDS("data/datainput1_legacy.rds")
runApp()
View(datainput1)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
forceNetwork(
Links = datainput2links,
Nodes = datainput2nodes,
Source = "source",
Target = "target",
Value = "linkvalue",
NodeID = "nodeid",
Group = "nodegroup",
opacity = 1,
fontSize = 20,
zoom = FALSE,
linkDistance = JS("function(d){return d.value * 20}"),
linkWidth = JS("function(d) { return Math.sqrt(d.value)*1.9; }"),
legend = TRUE
)
forceNetwork(
Links = datainput2links,
Nodes = datainput2nodes,
Source = "source",
Target = "target",
Value = "linkvalue",
NodeID = "nodeid",
Group = "nodegroup",
opacity = 1,
fontSize = 20,
zoom = FALSE,
linkDistance = JS("function(d){return d.value * 20}"),
linkWidth = JS("function(d) { return Math.sqrt(d.value)*1.9; }"),
legend = TRUE
)
runApp()
