runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
View(datacountries)
View(datacountries.rds)
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
rm(list= ls()
rm(list= ls())
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
View(data)
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
dt = readRDS("C:/Users/PC001/Desktop/StoryTelling/gitRepo/data/datacountries.rds")
View(dt)
sum(dt$quantity)
rm(dt)
View(datacountries)
library(sqldf)
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "project2",
host = "localhost", port = 5432,
user = "postgres", password = "postgres")
countrystats = dbReadTable(con, "data2country")
View(countrystats)
View(data)
data = dbReadTable(con, "data2trans1")
dbDisconnect(con)
library(sqldf)
datainput1 = sqldf("
select a.*, b.cnt, b.sales_q, b.sales_c
from countrystats
join (
select
country,
count(*) cnt,
sum(sales_c) sales_c,
sum(sales_q) sales_q
from data
group by country ) b
on a.country2 = b.country")
library(sqldf)
datainput1 = sqldf("
select a.*, b.cnt, b.sales_q, b.sales_c
from countrystats
join (
select
country,
count(*) cnt,
sum(sales_c) sales_c,
sum(sales_q) sales_q
from data
group by country ) b
on a.country2 = b.country")
library(sqldf)
datainput1 = sqldf("
select a.*, b.cnt, b.sales_q, b.sales_c
from countrystats
join (
select
country,
count(*) cnt,
sum(sales_c) sales_c,
sum(sales_q) sales_q
from data
group by country ) b
on a.country2 = b.country")
rm(con)
rm(drv)
datainput1 = sqldf("select a.*, b.cnt, b.sales_q, b.sales_c from countrystats join (select country, count(*) cnt, sum(sales_c) sales_c, sum(sales_q) sales_q from data group by country ) b on a.country2 = b.country")
datainput1 = sqldf("select a.*, b.cnt, b.sales_q, b.sales_c from countrystats join (select country, count(*) cnt, sum(sales_c) sales_c, sum(sales_q) sales_q from data group by country ) b on a.country2 = b.country")
datainput1 = sqldf("select country, count(*) cnt, sum(sales_c) sales_c, sum(sales_q) sales_q from data group by country")
library(RPostgreSQL
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "project2",
+                   host = "localhost", port = 5432,
+                   user = "postgres", password = "postgres")
con <- dbConnect(drv, dbname = "project2",
host = "localhost", port = 5432,
user = "postgres", password = "postgres")
df_postgres <- dbGetQuery(con, "SELECT * from data2trans1")
rm(df_postgres)
datainput1 = dbGetQuery(con, "select a.*, b.cnt, b.sales_q, b.sales_c from data2country join (select country, count(*) cnt, sum(sales_c) sales_c, sum(sales_q) sales_q from data2trans1 group by country ) b on a.country2 = b.country")
datainput1 = dbGetQuery(con, "select a.*, b.cnt, b.sales_q, b.sales_c from data2country a join (select country, count(*) cnt, sum(sales_c) sales_c, sum(sales_q) sales_q from data2trans1 group by country) b on a.country2 = b.country")
View(datainput1)
View(datacountries)
datainput1 = dbGetQuery(con, "select a.*, b.cnt, b.sales_q, b.sales_c from data2country a join (select country, count(*) cnt, sum(sales_c) sales_c, sum(sales_q) sales_q from data2trans1 group by country) b on upper(a.country2) = b.country")
View(datainput1)
dbDisconnect(con)
View(datacountries)
shiny::runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
datainput1 <- datainput1[order(sales_c),]
View(datainput1)
datainput1 <- datainput1[order(sales_c),]
datainput1$sales_c
datainput1 = datainput1[order(sales_c),]
datainput1 = datainput1[order(datainput1$sales_c),]
datainput1$cumul=cumsum(datainput1$sales_c)
datainput1$cumulfreqnum = 100*data1$cumul/sum(data1$quantity)
datainput1$cumulfreqnum = 100*datainput1$cumul/sum(datainput1$sales_c)
datainput1$cumulfreqnum = as.numeric(format(round(a, 2), nsmall = 2))
datainput1$cumulfreqnum = as.numeric(format(round(datainput1$cumulfreqnum, 2), nsmall = 2))
saveRDS(datainput1, "C:/Users/PC001/Desktop/StoryTelling/gitRepo/data/datainput1.rds")
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
rm(list= ls())
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "project2",
host = "localhost", port = 5432,
user = "postgres", password = "postgres")
datainput1 = dbGetQuery(con, "select a.*, b.cnt, b.sales_q, b.sales_c from data3country a join (select country, count(*) cnt, sum(sales) sales_c, sum(quantity) sales_q from data3trans1 where to_char(issuedate, 'YYYY') <> '2017' group by country) b on upper(a.country2) = b.country")
dbDisconnect(con)
datainput1 = datainput1[order(datainput1$sales_c),]
datainput1$cumul=cumsum(datainput1$sales_c)
datainput1$cumulfreqnum = 100*datainput1$cumul/sum(datainput1$sales_c)
datainput1$cumulfreqnum = as.numeric(format(round(datainput1$cumulfreqnum, 2), nsmall = 2))
saveRDS(datainput1, "C:/Users/PC001/Desktop/StoryTelling/gitRepo/data/datainput1.rds")
shiny::runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
shiny::runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
getwd()
View(datainput0)
shiny::runApp()
shiny::runApp()
library(ggplot2)
totalordersperlinecat = datainput0 %>%
group_by(itemline, itemcategory) %>%
summarise(y=n()) %>%
arrange(itemline, itemcategory)
ggplot(totalordersperlinecat, aes(y=y, x=itemcategory, color=itemcategory, fill=itemcategory)) +
geom_bar( stat="identity") +
facet_wrap(~itemline) + theme(axis.text.x=element_blank()) + theme(axis.title.x=element_blank(),  axis.ticks.x=element_blank()) + theme(axis.title.y=element_blank(), axis.ticks.y=element_blank())
ggplot(totalordersperlinecat, aes(y=y, x=itemcategory, color=itemcategory, fill=itemcategory)) +
geom_bar( stat="identity") +
facet_wrap(~itemline) + theme(axis.text.x=element_blank()) + theme(axis.title.x=element_blank(),  axis.ticks.x=element_blank()) + theme(axis.title.y=element_blank(), axis.ticks.y=element_blank())
ggplot(totalordersperlinecat, aes(fill=itemcategory, y=y, x=itemline)) +
geom_bar( stat="identity", position="fill")  + theme(axis.title.x=element_blank(),  axis.ticks.x=element_blank()) + theme(axis.title.y=element_blank(), axis.ticks.y=element_blank())
totalordersperlinecatgroup = datainput0 %>%
group_by(itemline, itemcategory, itemgroup) %>%
summarise(y=n()) %>%
arrange(itemline, itemcategory, itemgroup)
ggplot(totalordersperlinecatgroup, aes(y=y, x=itemgroup, color=itemgroup, fill=itemgroup)) +
geom_bar( stat="identity") +
facet_wrap(~itemcategory) + theme(axis.text.x=element_blank()) + theme(axis.title.x=element_blank(),  axis.ticks.x=element_blank()) + theme(axis.title.y=element_blank(), axis.ticks.y=element_blank())
shiny::runApp()
shiny::runApp()
library(ggplot2)
ggplot(datainput0, aes(x=sales)) + geom_histogram(binwidth = 500, color="white", fill=alpha('blue',0.2) ) + xlim(c(0,30000)) + ylim(c(0,42000)) + theme(axis.title.x=element_blank(),  axis.ticks.x=element_blank()) + theme(axis.title.y=element_blank(), axis.ticks.y=element_blank())
summary(datainput0$sales)
range(datainput0$sales)
var(datainput0$sales)
var(datainput0$sales)^(1/2)/mean(datainput0$sale) # *100 = ..%
ggplot(datainput0, aes(x=quantity)) + geom_histogram(binwidth = 50, color="white", fill=alpha('red',0.2) )  + theme(axis.title.x=element_blank(),  axis.ticks.x=element_blank()) + theme(axis.title.y=element_blank(), axis.ticks.y=element_blank()) + xlim(c(-1,5000))
totalorderspercountry = datainput0 %>%
group_by(country) %>%
summarise(y=n()) %>%
arrange(country)
ggplot(totalorderspercountry,aes(x=reorder(country, -y), y=y)) + geom_bar(stat = "identity", fill=alpha('green',0.3)) + theme(axis.text.x=element_text(angle=60, hjust=1))+ theme(axis.title.x=element_blank(),  axis.ticks.x=element_blank()) + theme(axis.title.y=element_blank(), axis.ticks.y=element_blank())
totalsalespercountry = datainput0 %>%
group_by(country) %>%
summarise(y=sum(sales)) %>%
arrange(country)
ggplot(totalsalespercountry,aes(x=reorder(country, -y), y=y)) + geom_bar(stat = "identity", fill=alpha('blue',0.2)) + theme(axis.text.x=element_text(angle=60, hjust=1))+ theme(axis.title.x=element_blank(),  axis.ticks.x=element_blank()) + theme(axis.title.y=element_blank(), axis.ticks.y=element_blank())
library(ggplot2)
totalordersperlinecat = datainput0 %>%
group_by(itemline, itemcategory) %>%
summarise(y=n()) %>%
arrange(itemline, itemcategory)
ggplot(totalordersperlinecat, aes(y=y, x=itemcategory, color=itemcategory, fill=itemcategory)) +
geom_bar( stat="identity") +
facet_wrap(~itemline) + theme(axis.text.x=element_blank()) + theme(axis.title.x=element_blank(),  axis.ticks.x=element_blank()) + theme(axis.title.y=element_blank(), axis.ticks.y=element_blank())
ggplot(totalordersperlinecat, aes(fill=itemcategory, y=y, x=itemline)) +
geom_bar( stat="identity", position="fill")  + theme(axis.title.x=element_blank(),  axis.ticks.x=element_blank()) + theme(axis.title.y=element_blank(), axis.ticks.y=element_blank())
totalordersperlinecatgroup = datainput0 %>%
group_by(itemline, itemcategory, itemgroup) %>%
summarise(y=n()) %>%
arrange(itemline, itemcategory, itemgroup)
ggplot(totalordersperlinecatgroup, aes(y=y, x=itemgroup, color=itemgroup, fill=itemgroup)) +
geom_bar( stat="identity") +
facet_wrap(~itemcategory) + theme(axis.text.x=element_blank()) + theme(axis.title.x=element_blank(),  axis.ticks.x=element_blank()) + theme(axis.title.y=element_blank(), axis.ticks.y=element_blank())
rm(list = ls()[!(ls() %in% c('datainput0','datainput1','datainput2links','datainput2nodes'))])
totalsalesperlinecat = datainput0 %>%
group_by(itemline, itemcategory) %>%
summarise(y=sum(sales)) %>%
arrange(itemline, itemcategory)
ggplot(totalsalesperlinecat, aes(y=y, x=itemcategory, color=itemcategory, fill=itemcategory)) +
geom_bar( stat="identity") +
facet_wrap(~itemline) + theme(axis.text.x=element_blank()) + theme(axis.title.x=element_blank(),  axis.ticks.x=element_blank()) + theme(axis.title.y=element_blank(), axis.ticks.y=element_blank())
ggplot(totalsalesperlinecat, aes(fill=itemcategory, y=y, x=itemline)) +
geom_bar( stat="identity", position="fill")  + theme(axis.title.x=element_blank(),  axis.ticks.x=element_blank()) + theme(axis.title.y=element_blank(), axis.ticks.y=element_blank())
totalsalesperlinecatgroup = datainput0 %>%
group_by(itemline, itemcategory, itemgroup) %>%
summarise(y=sum(sales)) %>%
arrange(itemline, itemcategory, itemgroup)
ggplot(totalsalesperlinecatgroup, aes(y=y, x=itemgroup, color=itemgroup, fill=itemgroup)) +
geom_bar( stat="identity") +
facet_wrap(~itemcategory) + theme(axis.text.x=element_blank()) + theme(axis.title.x=element_blank(),  axis.ticks.x=element_blank()) + theme(axis.title.y=element_blank(), axis.ticks.y=element_blank())
ggplot(totalordersperlinecatgroup, aes(y=y, x=itemgroup, color=itemgroup, fill=itemgroup)) +
geom_bar( stat="identity") +
facet_wrap(~itemcategory) + theme(axis.text.x=element_blank()) + theme(axis.title.x=element_blank(),  axis.ticks.x=element_blank()) + theme(axis.title.y=element_blank(), axis.ticks.y=element_blank())
totalordersperlinecatgroup = datainput0 %>%
group_by(itemline, itemcategory, itemgroup) %>%
summarise(y=n()) %>%
arrange(itemline, itemcategory, itemgroup)
ggplot(totalordersperlinecatgroup, aes(y=y, x=itemgroup, color=itemgroup, fill=itemgroup)) +
geom_bar( stat="identity") +
facet_wrap(~itemcategory) + theme(axis.text.x=element_blank()) + theme(axis.title.x=element_blank(),  axis.ticks.x=element_blank()) + theme(axis.title.y=element_blank(), axis.ticks.y=element_blank())
totalsalesperlinecatgroup = datainput0 %>%
group_by(itemline, itemcategory, itemgroup) %>%
summarise(y=sum(sales)) %>%
arrange(itemline, itemcategory, itemgroup)
ggplot(totalsalesperlinecatgroup, aes(y=y, x=itemgroup, color=itemgroup, fill=itemgroup)) +  geom_bar( stat="identity") +
facet_wrap(~itemcategory) + theme(axis.text.x=element_blank()) + theme(axis.title.x=element_blank(),  axis.ticks.x=element_blank()) + theme(axis.title.y=element_blank(), axis.ticks.y=element_blank())
totalquantityperlinecatgroup = datainput0 %>%
group_by(itemline, itemcategory, itemgroup) %>%
summarise(y=sum(quantity)) %>%
arrange(itemline, itemcategory, itemgroup)
ggplot(totalquantityperlinecatgroup, aes(y=y, x=itemgroup, color=itemgroup, fill=itemgroup)) +
geom_bar( stat="identity") +
facet_wrap(~itemcategory) + theme(axis.text.x=element_blank()) + theme(axis.title.x=element_blank(),  axis.ticks.x=element_blank()) + theme(axis.title.y=element_blank(), axis.ticks.y=element_blank())
library(dplyr)
totalorderspersize = datainput0 %>%
group_by(itemsizerank) %>%
summarise(y=n()) %>%
arrange(itemsizerank)
ggplot(totalorderspersize, aes(y=y, x=itemsizerank, color=itemsizerank, fill=itemsizerank)) + geom_bar( stat="identity")  + theme(axis.text.x=element_blank())+ theme(axis.title.x=element_blank(),  axis.ticks.x=element_blank()) + theme(axis.title.y=element_blank(), axis.ticks.y=element_blank())
library(dplyr)
totalorderspersize = datainput0 %>%
group_by(itemsizerank) %>%
summarise(y=n()) %>%
arrange(itemsizerank)
ggplot(totalorderspersize, aes(y=y, x=itemsizerank, color=itemsizerank, fill=itemsizerank)) + geom_bar( stat="identity")  + theme(axis.text.x=element_blank())+ theme(axis.title.x=element_blank(),  axis.ticks.x=element_blank()) + theme(axis.title.y=element_blank(), axis.ticks.y=element_blank())
totalsalespersize = datainput0 %>%
group_by(itemsizerank) %>%
summarise(y=sum(sales)) %>%
arrange(itemsizerank)
ggplot(totalsalespersize, aes(y=y, x=itemsizerank, color=itemsizerank, fill=itemsizerank)) + geom_bar( stat="identity")  + theme(axis.text.x=element_blank())+ theme(axis.title.x=element_blank(),  axis.ticks.x=element_blank()) + theme(axis.title.y=element_blank(), axis.ticks.y=element_blank())
totalorderspersize = datainput0 %>%
group_by(itemsizerank) %>%
summarise(y=n()) %>%
arrange(itemsizerank)
ggplot(totalorderspersize, aes(y=y, x=itemsizerank, color=itemsizerank, fill=itemsizerank)) + geom_bar( stat="identity")  + theme(axis.text.x=element_blank())+ theme(axis.title.x=element_blank(),  axis.ticks.x=element_blank()) + theme(axis.title.y=element_blank(), axis.ticks.y=element_blank())
totalorderspersize = datainput0 %>%
group_by(itemsizerank) %>%
summarise(y=n()) %>%
arrange(itemsizerank)
ggplot(totalorderspersize, aes(y=y, x=itemsizerank, color=itemsizerank, fill=itemsizerank)) + geom_bar( stat="identity")  + theme(axis.text.x=element_blank())+ theme(axis.title.x=element_blank(),  axis.ticks.x=element_blank()) + theme(axis.title.y=element_blank(), axis.ticks.y=element_blank())
totalsalespersize = datainput0 %>%
group_by(itemsizerank) %>%
summarise(y=sum(sales)) %>%
arrange(itemsizerank)
ggplot(totalsalespersize, aes(y=y, x=itemsizerank, color=itemsizerank, fill=itemsizerank)) + geom_bar( stat="identity")  + theme(axis.text.x=element_blank())+ theme(axis.title.x=element_blank(),  axis.ticks.x=element_blank()) + theme(axis.title.y=element_blank(), axis.ticks.y=element_blank())
totalorderspersize = datainput0 %>%
group_by(itemsizerank) %>%
summarise(y=n()) %>%
arrange(itemsizerank)
ggplot(totalorderspersize, aes(y=y, x=itemsizerank, color=itemsizerank, fill=itemsizerank)) + geom_bar( stat="identity")  + theme(axis.text.x=element_blank())+ theme(axis.title.x=element_blank(),  axis.ticks.x=element_blank()) + theme(axis.title.y=element_blank(), axis.ticks.y=element_blank())
totalorderspersize = datainput0 %>%
group_by(itemsizerank) %>%
summarise(y=n()) %>%
arrange(itemsizerank)
ggplot(totalorderspersize, aes(y=y, x=itemsizerank, color=itemsizerank, fill=itemsizerank)) + geom_bar( stat="identity")  + theme(axis.text.x=element_blank())+ theme(axis.title.x=element_blank(),  axis.ticks.x=element_blank()) + theme(axis.title.y=element_blank(), axis.ticks.y=element_blank())
totalsalespersize = datainput0 %>%
group_by(itemsizerank) %>%
summarise(y=sum(sales)) %>%
arrange(itemsizerank)
ggplot(totalsalespersize, aes(y=y, x=itemsizerank, color=itemsizerank, fill=itemsizerank)) + geom_bar( stat="identity")  + theme(axis.text.x=element_blank())+ theme(axis.title.x=element_blank(),  axis.ticks.x=element_blank()) + theme(axis.title.y=element_blank(), axis.ticks.y=element_blank())
totalquantitypersize = datainput0 %>%
group_by(itemsizerank) %>%
summarise(y=sum(quantity)) %>%
arrange(itemsizerank)
ggplot(totalquantitypersize, aes(y=y, x=itemsizerank, color=itemsizerank, fill=itemsizerank)) + geom_bar( stat="identity")  + theme(axis.text.x=element_blank())+ theme(axis.title.x=element_blank(),  axis.ticks.x=element_blank()) + theme(axis.title.y=element_blank(), axis.ticks.y=element_blank())
devtools::install_github(c("ramnathv/htmlwidgets", "smartinsightsfromdata/rpivotTable"))
library(rpivotTable)
sampleA = datainput0[sample(nrow(datainput0), 18000), ]
ggplot(datainput0, aes(fill=itemsize, y=sales, x=issueyear)) + geom_bar(position="dodge", stat="identity")
ggplot(datainput0, aes(fill=itemsizerank, y=sales, x=issueyear)) + geom_bar(position="dodge", stat="identity")
rpivotTable(sampleA)
rpivotTable(sampleA,width="100%", height="400px")
ggplot(datainput0, aes(fill=itemsizerank, y=sales, x=issueyear)) + geom_bar(position="dodge", stat="identity")
rpivotTable(datainput0, width="100%", height="400px")
rpivotTable(datainput0, width="100%", height="400px")
sample100 = datainput0[sample(nrow(datainput0), 100000), ]
rpivotTable(sample100, width="100%", height="400px")
runApp('C:/Users/PC001/Desktop/R-Shiny-Pivot-master')
devtools::install_github("AnalytixWare/ShinySky")
library(shinysky)
runApp('C:/Users/PC001/Desktop/R-Shiny-Pivot-master')
setwd("C:/Users/PC001/Desktop/R-Shiny-Pivot-master")
runApp()
shinysky::run.shinysky.example()
runApp()
runApp()
colsFn = function(d, c, v){
colsQ <<- list()
data = d
colvals = sqldf(paste("SELECT DISTINCT",c,"FROM data"))
cols = strsplit(c, ",")
vals = strsplit(v, ",")
for (Column in unlist(cols)){
for (ColVal in colvals){
for (Value in unlist(vals)){
colsQ = c(colsQ,paste('SUM(CASE WHEN ',Column,' =="',colvals[ColVal,],'" THEN "',Value,'" END) AS ',paste(colvals[ColVal,],Value,sep="_"),sep=""))
}
}
}
return (paste(unlist(colsQ),collapse=", "))
}
genFn = function(dataset, data, r, c, v){
##  Start with SELECT
q = "SELECT "
##  Add in the "Rows"
q = paste(q,r,sep="")
##  Add in "Columns" and "Values"
q = paste(q, ",", colsFn(data,c,v))
##  Add "From"
q = paste(q," FROM ",dataset,sep="")
##  Add the Rows in "Group By"
q = paste(q, " GROUP BY ",r,sep="")
q
}
setwd("C:/Users/PC001/Desktop/StoryTelling/gitRepo")
ggplot(datainput0, aes(fill=itemsizerank, y=sales, x=issueyear)) + geom_bar(position="dodge", stat="identity")
View(datainput0)
# reduce granularity from date to month
monthGranularity = datainput0 %>%
select(country, itemline, itemcategory, itemgroup, itemsize, itemsizerank, issueyear, issuemonth, issueyearmon) %>%
group_by(country, itemline, itemcategory, itemgroup, itemsize, itemsizerank, issueyear, issuemonth, issueyearmon) %>%
summarise(sales=sum(sales), quantity=sum(quantity)) %>%
arrange(issueyearmon)
# reduce granularity from date to month
monthGranularity = datainput0 %>%
select(country, itemline, itemcategory, itemgroup, itemsize, itemsizerank, issueyear, issuemonth, issueyearmon) %>%
group_by(country, itemline, itemcategory, itemgroup, itemsize, itemsizerank, issueyear, issuemonth, issueyearmon) %>%
summarise(totalsales=sum(sales), totalquantity=sum(quantity)) %>%
arrange(issueyearmon)
# reduce granularity from date to month
monthGranularity = datainput0 %>%
select(country, itemline, itemcategory, itemgroup, itemsize, itemsizerank, issueyear, issuemonth, issueyearmon) %>%
group_by(country, itemline, itemcategory, itemgroup, itemsize, itemsizerank, issueyear, issuemonth, issueyearmon) %>%
summarise(sales=sum(datainput0$sales), quantity=sum(quantity)) %>%
arrange(issueyearmon)
# reduce granularity from date to month
monthGranularity = datainput0 %>%
select(country, itemline, itemcategory, itemgroup, itemsize, itemsizerank, issueyear, issuemonth, issueyearmon) %>%
group_by(country, itemline, itemcategory, itemgroup, itemsize, itemsizerank, issueyear, issuemonth, issueyearmon) %>%
summarise(sales=sum(datainput0$sales), quantity=sum(datainput0$quantity)) %>%
arrange(issueyearmon)
# reduce granularity from date to month
monthGranularity = datainput0 %>%
select(country, itemline, itemcategory, itemgroup, itemsize, itemsizerank, issueyear, issuemonth, issueyearmon) %>%
group_by(country, itemline, itemcategory, itemgroup, itemsize, itemsizerank, issueyear, issuemonth, issueyearmon) %>%
summarise(sales=sum(datainput0$sales), quantity=sum(datainput0$quantity)) %>%
arrange(datainput0$issueyearmon)
# reduce granularity from date to month
monthGranularity = datainput0 %>%
select(country, itemline, itemcategory, itemgroup, itemsize, itemsizerank, issueyear, issuemonth, issueyearmon) %>%
group_by(country, itemline, itemcategory, itemgroup, itemsize, itemsizerank, issueyear, issuemonth, issueyearmon) %>%
summarise(sales=sum(datainput0$sales), quantity=sum(datainput0$quantity))
View(monthGranularity)
# reduce granularity from date to month
monthGranularity = datainput0 %>%
select(country, itemline, itemcategory, itemgroup, itemsize, itemsizerank, issueyear, issuemonth, issueyearmon) %>%
group_by(country) %>%
summarise(sales=sum(datainput0$sales), quantity=sum(datainput0$quantity))
View(monthGranularity)
# reduce granularity from date to month
monthGranularity = datainput0 %>%
group_by(country, itemline, itemcategory, itemgroup, itemsize, itemsizerank, issueyear, issuemonth, issueyearmon) %>%
summarise(sales=sum(datainput0$sales), quantity=sum(datainput0$quantity))
View(monthGranularity)
# reduce granularity from date to month
monthGranularity = datainput0 %>%
group_by(country, datainput0$itemline, itemcategory, itemgroup, itemsize, itemsizerank, issueyear, issuemonth, issueyearmon) %>%
summarise(sales=sum(datainput0$sales), quantity=sum(datainput0$quantity))
View(monthGranularity)
require(dplyr)
monthGranularity = datainput0 %>%
group_by(country, datainput0$itemline, itemcategory, itemgroup, itemsize, itemsizerank, issueyear, issuemonth, issueyearmon) %>%
summarise(sales=sum(datainput0$sales), quantity=sum(datainput0$quantity))
aa = datainput0 %>%
group_by(country, datainput0$itemline, itemcategory, itemgroup, itemsize, itemsizerank, issueyear, issuemonth, issueyearmon) %>%
summarise(sales=sum(datainput0$sales), quantity=sum(datainput0$quantity))
# reduce granularity from date to month
aa = datainput0 %>%
summarise(sales=sum(datainput0$sales), quantity=sum(datainput0$quantity)) %>%
group_by(country, datainput0$itemline, itemcategory, itemgroup, itemsize, itemsizerank, issueyear, issuemonth, issueyearmon)
# reduce granularity from date to month
aa = datainput0 %>%
summarise(sales=sum(datainput0$sales), quantity=sum(datainput0$quantity)) %>%
group_by(country, itemline, itemcategory, itemgroup, itemsize, itemsizerank, issueyear, issuemonth, issueyearmon)
# reduce granularity from date to month
aa = datainput0 %>%
summarise(sales=sum(datainput0$sales), quantity=sum(datainput0$quantity)) %>%
group_by(datainput0$country, datainput0$itemline, datainput0$itemcategory, datainput0$itemgroup, datainput0$itemsize, datainput0$itemsizerank, datainput0$issueyear, datainput0$issuemonth, datainput0$issueyearmon)
# reduce granularity from date to month
aa = datainput0 %>%
summarise(sales=sum(datainput0$sales), quantity=sum(datainput0$quantity)) %>%
group_by(datainput0$country)
# reduce granularity from date to month
aa = datainput0 %>%
summarise(sales=sum(datainput0$sales), quantity=sum(datainput0$quantity)) %>%
group_by(datainput0$country, datainput0$itemline, datainput0$itemcategory, datainput0$itemgroup, datainput0$itemsize, datainput0$itemsizerank, datainput0$issueyear, datainput0$issuemonth, datainput0$issueyearmon)
# reduce granularity from date to month
aa = datainput0 %>%
group_by(country, itemline, itemcategory, itemgroup, itemsize, itemsizerank, issueyear, issuemonth, issueyearmon) %>%
select(country, itemline, itemcategory, itemgroup, itemsize, itemsizerank, issueyear, issuemonth, issueyearmon) %>%
summarise(sales=sum(datainput0$sales), quantity=sum(datainput0$quantity))
View(aa)
require(sqldf)
# reduce granularity from date to month
aa = datainput0 %>%
group_by(country, itemline, itemcategory, itemgroup, itemsize, itemsizerank, issueyear, issuemonth, issueyearmon) %>%
select(country, itemline, itemcategory, itemgroup, itemsize, itemsizerank, issueyear, issuemonth, issueyearmon) %>%
summarise(sales=sum(sales), quantity=sum(quantity))
# reduce granularity from date to month
aa = datainput0 %>%
group_by(country, itemline, itemcategory, itemgroup, itemsize, itemsizerank, issueyear, issuemonth, issueyearmon) %>%
select(country, itemline, itemcategory, itemgroup, itemsize, itemsizerank, issueyear, issuemonth, issueyearmon) %>%
summarise(a=sum(sales), b=sum(quantity))
require(sqldf)
sqldf("Select country, itemline, itemcategory, itemgroup, itemsize, itemsizerank, issueyear, issuemonth, issueyearmon, sum(sales) sales, sum(quantity) quantity from datainput0 Group By country, itemline, itemcategory, itemgroup, itemsize, itemsizerank, issueyear, issuemonth, issueyearmon")
require(sqldf)
monthGran = sqldf("Select country, itemline, itemcategory, itemgroup, itemsize, itemsizerank, issueyear, issuemonth, issueyearmon, sum(sales) sales, sum(quantity) quantity from datainput0 Group By country, itemline, itemcategory, itemgroup, itemsize, itemsizerank, issueyear, issuemonth, issueyearmon order by issueyearmon")
View(monthGran)
rpivotTable(monthGran, width="100%", height="400px")
runApp()
runApp()
install.packages("dplyr")
install.packages("dplyr")
devtools::install_github("tidyverse/dplyr")
runApp()
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(
drv,
dbname = "project2",
host = "localhost",
port = 5432,
user = "postgres",
password = "postgres"
)
datainput0 = dbGetQuery(con, "select * from data3trans2;")
dbDisconnect(con)
saveRDS(
datainput0,
"C:/Users/PC001/Desktop/StoryTelling/gitRepo/data/datainput0.rds"
)
runApp()
runApp()
runApp()
runApp()
library("highcharter")
aa= datainput0 %>%
filter(as.integer(issueyear) == 2016) %>%
group_by(rank = as.integer(substr(itemsizerank, 1, 2)) + 1) %>%
summarise(total=sum(sales)) %>%
arrange(rank)
rank = as.integer(substr('02_itemsizerank', 1, 2)) + 1
typeof(rank)
aa= datainput0 %>%
filter(as.integer(issueyear) == 2016) %>%
group_by(itemsizerank) %>%
summarise(total=sum(sales)) %>%
arrange(rank = as.integer(substr(itemsizerank, 1, 2)) + 1)
aa= datainput0 %>%
filter(as.integer(issueyear) == 2016) %>%
group_by(datainput0$itemsizerank) %>%
summarise(total=sum(sales)) %>%
arrange(rank = as.integer(substr(itemsizerank, 1, 2)) + 1)
aa= datainput0 %>%
filter(as.integer(issueyear) == 2016) %>%
group_by(rank = as.integer(substr(itemsizerank, 1, 2)) + 1) %>%
summarise(total=sum(sales)) %>%
arrange(rank)
View(aa)
runApp()
runApp()
aa= datainput0 %>%
filter(as.integer(issueyear) == 2016) %>%
group_by(rank = as.integer(substr(itemsizerank, 1, 2)) + 1) %>%
summarise(total=sum(sales)) %>%
arrange(rank)
runApp()
remove.packages("highcharter")
remove.packages("jbkunst/highcharter")
remove.packages("highcharter")
devtools::install_github("jbkunst/highcharter")
library("highcharter")
runApp()
devtools::install_github("jbkunst/highcharter")
install.packages('highcharter')
shiny::runApp()
install.packages('highcharter')
runApp()
rm(list = ls()[!(ls() %in% c('datainput0','datainput1','datainput2links','datainput2nodes','monthGran'))])
shiny::runApp()
runApp("App-1")
shiny::runApp()
shiny::runApp()
View(monthGran)
View(monthGran)
View(monthGran)
shiny::runApp()
View(datainput1)
View(datainput1)
summary(datainput1$country)
