table(c(1,1))
table(c(1,1,3))
table(c(1,1,3,4,6))
table(c(1,1,3,4,6,1,3,5))
table(data2$quantity)
cumsum(table(data2$quantity))
cumsum(data2$quantity)
sum(data2$quantity)
data2$cumul=cumsum(data2$quantity)
View(data2)
prop.table(data2$quantity)
prop.table(data2$cumul)
data2$p1 = prop.table(data2$cumul)
data2$p2 = prop.table(data2$quantity)
data2$relative = 100*(data2$cumul/sum(quantity))
data2$relative = 100*(data2$cumul/sum(data2$quantity))
sum(data2$quantity)
data2[7,1]
data2[1,7]
data2[1,7]/sum(data2$quantity)
sprintf("%10.20f",data2[1,7]/sum(data2$quantity))
sprintf("%10.20f",data2[30,7]/sum(data2$quantity))
sprintf("%10.10f",data2[30,7]/sum(data2$quantity))
sprintf("%10.4f",data2[30,7]/sum(data2$quantity))
sprintf("%10.04f",data2[30,7]/sum(data2$quantity))
sprintf("%10.10f",data2[30,7]/sum(data2$quantity))
sprintf("%10.10f",data2$cumul/sum(data2$quantity))
sprintf("%10.10f",100*data2$cumul/sum(data2$quantity))
p3 = sprintf("%10.10f",100*data2$cumul/sum(data2$quantity))
data2$p3 = sprintf("%10.10f",100*data2$cumul/sum(data2$quantity))
View(data2)
data2$p4=as.numeric(data2$p3)
getwd()
saveRDS(data2, "C:/Users/PC001/Desktop/StoryTelling/gitRepo/data/mymodel.rds")
data3 = readRDS("C:/Users/PC001/Desktop/StoryTelling/gitRepo/data/mymodel.rds")
saveRDS("C:/Users/PC001/Desktop/StoryTelling/gitRepo/data/data1trans3.rds")
saveRDS(data, "C:/Users/PC001/Desktop/StoryTelling/gitRepo/data/data1trans3.rds")
data1
data1$cumul=cumsum(data1$quantity)
data1$cumulfreq = sprintf("%10.10f",100*data1$cumul/sum(data1$quantity))
data1
data1$cumulfreqnum = 100*data1$cumul/sum(data1$quantity)
saveRDS(data1, "C:/Users/PC001/Desktop/StoryTelling/gitRepo/data/data1.rds")
ls()
ls(3)
ls(3,1)
ls([3,1])
shiny::runApp('C:/Users/PC001/Desktop/shiny-examples-master/063-superzip-example')
shiny::runApp('C:/Users/PC001/Desktop/shiny-examples-master/063-superzip-example')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
options(digits=9)
100*data1$cumul/sum(data1$quantity)
a = 100*data1$cumul/sum(data1$quantity)
a=as.character(a)
a
a = as.numeric(a)
a
specify_decimal <- function(x, k) trimws(format(round(x, k), nsmall=k))
specify_decimal <- (a, 5)
a
specify_decimal <- (a, 5)
specify_decimal <- function(x, k) {trimws(format(round(x, k), nsmall=k))}
specify_decimal <- (a, 5)
specify_decimal <- function(x, k) trimws(format(round(x, k), nsmall=k))
specify_decimal <- (a, '5')
format(round(a, 2), nsmall = 2)
b = format(round(a, 2), nsmall = 2)
b = as.numeric(b)
b
data1$cumulfreqnum = as.numeric(format(round(a, 2), nsmall = 2))
saveRDS(data1, "C:/Users/PC001/Desktop/StoryTelling/gitRepo/data/data1.rds")
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/shiny-examples-master/063-superzip-example')
runApp('C:/Users/PC001/Desktop/shiny-examples-master/063-superzip-example')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
as.integer(data1$quantity))
as.integer(data1$quantity)
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
a=as.integer(data1$quantity)
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
format(as.integer(data1$quantity), big.mark=",", scientific=FALSE)
a=format(as.integer(data1$quantity), big.mark=",", scientific=FALSE)
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
hist(data1$cumulfreqnum,
breaks = centileBreaks,
main = "records score (visible zips)",
xlab = "Percentile",
xlim = range(data1$cumulfreqnum),
col = '#00DD00',
border = 'white')
centileBreaks <- hist(plot = FALSE, data1$cumulfreqnum, breaks = 20)$breaks
hist(data1$cumulfreqnum,
breaks = centileBreaks,
main = "records score (visible zips)",
xlab = "Percentile",
xlim = range(data1$cumulfreqnum),
col = '#00DD00',
border = 'white')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
library("ggplot2")
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
ggplot(data=data1, aes(data1$cumulfreqnum)) +
geom_histogram(aes(y =..density..),
breaks=ccentileBreaks,
col="red",
fill="green",
alpha = .2) +
geom_density(col=2) +
labs(title="Histogram for Age") +
labs(x="Age", y="Count")
ggplot(data=data1, aes(data1$cumulfreqnum)) +
geom_histogram(aes(y =..density..),
breaks=centileBreaks,
col="red",
fill="green",
alpha = .2) +
geom_density(col=2) +
labs(title="Histogram for Age") +
labs(x="Age", y="Count")
ggplot(data=data1, aes(data1$cumulfreqnum)) +
geom_histogram(aes(y =..density..),
breaks=centileBreaks,
col="blue",
fill="green",
alpha = .2) +
geom_density(col=2) +
labs(title="Histogram for Age") +
labs(x="Age", y="Count")
ggplot(data=data1, aes(data1$cumulfreqnum)) +
geom_histogram(aes(y =..density..),
breaks=centileBreaks,
col="red",
fill="grey",
alpha = .2) +
geom_density(col=2) +
labs(title="Histogram for Age") +
labs(x="Age", y="Count")
ggplot(data=data1, aes(data1$cumulfreqnum)) +
geom_histogram(aes(y =..density..),
breaks=centileBreaks,
alpha = .2) +
geom_density(col=2) +
labs(title="Histogram for Age") +
labs(x="Age", y="Count")
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
print(xyplot(quantity ~ cnt, data = data1, xlim = range(data1$cnt), ylim = range(data1$quantity)))
ggplot(data1, aes(x=cnt, y=quantity, color=cyl)) +
geom_point() + geom_rug()
ggplot(data1, aes(x=cnt, y=quantity, color=records)) +
geom_point() + geom_rug()
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo', display.mode = 'showcase')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo', display.mode = 'showcase')
install.packages("RPostgreSQL")
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "project2",
host = "localhost", port = 5432,
user = "postgres", password = "postgres")
dbListTables(con)
countrystats = dbReadTable(con, "datacountries2")
View(countrystats)
library(sqldf)
dbDisconnect(con)
View(data2)
rm(data2)
rm(data3)
rm(subquanbycountry)
rm(sumquanbycountry)
View(data1)
View(data1)
View(countrystats)
View(data)
View(countrystats)
data1test = sqldf("select a.*, b.code, b.pop2013, b.pop2014, b.pop2015, b.pop2016, b.gdp2013, b.gdp2014, b.gdp2015, b.gdp2016
from data1 a
join countrystats b on a.country = b.countryname2 order by a.quantity")
library(sqldf)
data1test = sqldf("select a.*, b.code, b.pop2013, b.pop2014, b.pop2015, b.pop2016, b.gdp2013, b.gdp2014, b.gdp2015, b.gdp2016 from data1 a join countrystats b on a.country = b.countryname2 order by a.quantity")
data1test = sqldf("select data.countryname2 country, data.lon, data.lat, count(*) cnt, sum(data.quantity) quantity from data group by data.countryname2, data.lon, data.lat order by sum(data.quantity)")
install.packages('sqldf')
install.packages("sqldf")
library(sqldf)
sumquanbycountry = sqldf("select data.countryname2, data.lon, data.lat, count(*) cnt, sum(data.quantity) from data group by data.countryname2, data.lon, data.lat order by  sum(data.quantity)")
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "project2",
host = "localhost", port = 5432,
user = "postgres", password = "postgres")
data1test = sqldf("select data.countryname2 country, data.lon, data.lat, count(*) cnt, sum(data.quantity) quantity from data group by data.countryname2, data.lon, data.lat order by sum(data.quantity)")
data2 = sqldf("select data.countryname2 country, data.lon, data.lat, count(*) cnt, sum(data.quantity) quantity from data group by data.countryname2, data.lon, data.lat order by  sum(data.quantity)")
dbCommit(con)
dbDisconnect(con)
rm(con)
rm(drv)
data1test = sqldf("select data.countryname2 country, data.lon, data.lat, count(*) cnt, sum(data.quantity) quantity from data group by data.countryname2, data.lon, data.lat order by sum(data.quantity)")
library(sqldf)
data1test = sqldf("select data.countryname2 country, data.lon, data.lat, count(*) cnt, sum(data.quantity) quantity from data group by data.countryname2, data.lon, data.lat order by sum(data.quantity)")
data1test = sqldf("select a.*, b.code, b.pop2013, b.pop2014, b.pop2015, b.pop2016, b.gdp2013, b.gdp2014, b.gdp2015, b.gdp2016
from data1 a
join countrystats b on a.country = b.countryname2")
View(data1test)
datacountries = data1test
rm(data1test)
shiny::runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
saveRDS(datacountries, "C:/Users/PC001/Desktop/StoryTelling/gitRepo/data/datacountries.rds")
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
rm(MyData)
rm(data1)
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
View(datacountries)
View(datacountries.rds)
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
rm(list= ls()
rm(list= ls())
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
View(data)
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
dt = readRDS("C:/Users/PC001/Desktop/StoryTelling/gitRepo/data/datacountries.rds")
View(dt)
sum(dt$quantity)
rm(dt)
View(datacountries)
library(sqldf)
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "project2",
host = "localhost", port = 5432,
user = "postgres", password = "postgres")
countrystats = dbReadTable(con, "data2country")
View(countrystats)
View(data)
data = dbReadTable(con, "data2trans1")
dbDisconnect(con)
library(sqldf)
datainput1 = sqldf("
select a.*, b.cnt, b.sales_q, b.sales_c
from countrystats
join (
select
country,
count(*) cnt,
sum(sales_c) sales_c,
sum(sales_q) sales_q
from data
group by country ) b
on a.country2 = b.country")
library(sqldf)
datainput1 = sqldf("
select a.*, b.cnt, b.sales_q, b.sales_c
from countrystats
join (
select
country,
count(*) cnt,
sum(sales_c) sales_c,
sum(sales_q) sales_q
from data
group by country ) b
on a.country2 = b.country")
library(sqldf)
datainput1 = sqldf("
select a.*, b.cnt, b.sales_q, b.sales_c
from countrystats
join (
select
country,
count(*) cnt,
sum(sales_c) sales_c,
sum(sales_q) sales_q
from data
group by country ) b
on a.country2 = b.country")
rm(con)
rm(drv)
datainput1 = sqldf("select a.*, b.cnt, b.sales_q, b.sales_c from countrystats join (select country, count(*) cnt, sum(sales_c) sales_c, sum(sales_q) sales_q from data group by country ) b on a.country2 = b.country")
datainput1 = sqldf("select a.*, b.cnt, b.sales_q, b.sales_c from countrystats join (select country, count(*) cnt, sum(sales_c) sales_c, sum(sales_q) sales_q from data group by country ) b on a.country2 = b.country")
datainput1 = sqldf("select country, count(*) cnt, sum(sales_c) sales_c, sum(sales_q) sales_q from data group by country")
library(RPostgreSQL
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "project2",
+                   host = "localhost", port = 5432,
+                   user = "postgres", password = "postgres")
con <- dbConnect(drv, dbname = "project2",
host = "localhost", port = 5432,
user = "postgres", password = "postgres")
df_postgres <- dbGetQuery(con, "SELECT * from data2trans1")
rm(df_postgres)
datainput1 = dbGetQuery(con, "select a.*, b.cnt, b.sales_q, b.sales_c from data2country join (select country, count(*) cnt, sum(sales_c) sales_c, sum(sales_q) sales_q from data2trans1 group by country ) b on a.country2 = b.country")
datainput1 = dbGetQuery(con, "select a.*, b.cnt, b.sales_q, b.sales_c from data2country a join (select country, count(*) cnt, sum(sales_c) sales_c, sum(sales_q) sales_q from data2trans1 group by country) b on a.country2 = b.country")
View(datainput1)
View(datacountries)
datainput1 = dbGetQuery(con, "select a.*, b.cnt, b.sales_q, b.sales_c from data2country a join (select country, count(*) cnt, sum(sales_c) sales_c, sum(sales_q) sales_q from data2trans1 group by country) b on upper(a.country2) = b.country")
View(datainput1)
dbDisconnect(con)
View(datacountries)
shiny::runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
datainput1 <- datainput1[order(sales_c),]
View(datainput1)
datainput1 <- datainput1[order(sales_c),]
datainput1$sales_c
datainput1 = datainput1[order(sales_c),]
datainput1 = datainput1[order(datainput1$sales_c),]
datainput1$cumul=cumsum(datainput1$sales_c)
datainput1$cumulfreqnum = 100*data1$cumul/sum(data1$quantity)
datainput1$cumulfreqnum = 100*datainput1$cumul/sum(datainput1$sales_c)
datainput1$cumulfreqnum = as.numeric(format(round(a, 2), nsmall = 2))
datainput1$cumulfreqnum = as.numeric(format(round(datainput1$cumulfreqnum, 2), nsmall = 2))
saveRDS(datainput1, "C:/Users/PC001/Desktop/StoryTelling/gitRepo/data/datainput1.rds")
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
rm(list= ls())
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "project2",
host = "localhost", port = 5432,
user = "postgres", password = "postgres")
datainput1 = dbGetQuery(con, "select a.*, b.cnt, b.sales_q, b.sales_c from data3country a join (select country, count(*) cnt, sum(sales) sales_c, sum(quantity) sales_q from data3trans1 where to_char(issuedate, 'YYYY') <> '2017' group by country) b on upper(a.country2) = b.country")
dbDisconnect(con)
datainput1 = datainput1[order(datainput1$sales_c),]
datainput1$cumul=cumsum(datainput1$sales_c)
datainput1$cumulfreqnum = 100*datainput1$cumul/sum(datainput1$sales_c)
datainput1$cumulfreqnum = as.numeric(format(round(datainput1$cumulfreqnum, 2), nsmall = 2))
saveRDS(datainput1, "C:/Users/PC001/Desktop/StoryTelling/gitRepo/data/datainput1.rds")
shiny::runApp('C:/Users/PC001/Desktop/StoryTelling/gitRepo')
data(AirPassengers)
class(AirPassengers)
start(AirPassengers)
end(AirPassengers)
frequency(AirPassengers)
summary(AirPassengers)
plot(AirPassengers)
cycle(AirPassengers)
plot(aggregate(AirPassengers,FUN=mean))
boxplot(AirPassengers~cycle(AirPassengers))
plot(AirPassengers)
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
library('tseries')
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
myts <- ts(myvector, start=c(2009, 1), end=c(2014, 12), frequency=12)
myts <- ts(myvector, start=c(2009, 1), end=c(2014, 12), frequency=12)
a01 = sqldf(
"Select issueyearmon, sum(sales) sales from datainput3 where issueyearmon <> '2017-08' Group By issueyearmon order by issueyearmon"
)
library('sqldf')
datainput3 = readRDS("data/datainput3.rds")
datainput3 = readRDS("data/datainput3.rds")
setwd("C:/Users/PC001/Desktop/StoryTelling/gitRepo")
datainput3 = readRDS("data/datainput3.rds")
a01 = sqldf(
"Select issueyearmon, sum(sales) sales from datainput3 where issueyearmon <> '2017-08' Group By issueyearmon order by issueyearmon"
)
library('sqldf')
a01 = sqldf(
"Select issueyearmon, sum(sales) sales from datainput3 where issueyearmon <> '2017-08' Group By issueyearmon order by issueyearmon"
)
rm(list = ls()[!(ls() %in% c('datainput0','datainput1','datainput2links','datainput2nodes','datainput3'))])
a01 = sqldf(
"Select issueyearmon, sum(sales) sales from datainput3 where issueyearmon <> '2017-08' Group By issueyearmon order by issueyearmon"
)
shiny::runApp()
runApp()
shiny::runApp()
runApp()
plot.ts(birthstimeseries)
a01 = sqldf(
"Select issueyearmon, sum(sales) sales from datainput3 where issueyearmon <> '2017-08' Group By issueyearmon order by issueyearmon"
)
a01$ts = ts(
a01$sales,
start = c(2013, 1),
end = c(2017, 7),
frequency = 12
)
View(a01)
plot(a01$)
View(a01)
plot.ts(a01)
plot.ts(a01$ts,a01$sales)
a = ts(
a01$sales,
start = c(2013, 1),
end = c(2017, 7),
frequency = 12
)
a
a.frequency
type(a)
typeof(a)
plot.ts(a)
a
summary(a)
a
saleslog=log(a01$sales)
alog = ts(
a01$saleslog,
start = c(2013, 1),
end = c(2017, 7),
frequency = 12
)
alog = ts(
saleslog,
start = c(2013, 1),
end = c(2017, 7),
frequency = 12
)
plot(alog)
install.packages("TTR")
install.packages("TTR")
asma <- SMA(a,n=8)
library('TTR')
library('TTR')
install.packages("TTR")
install.packages("TTR")
library('TTR')
asma <- SMA(a,n=8)
plot.ts(SMA(a,n=4))
plot.ts(SMA(a,n=0))
plot.ts(SMA(a,n=1))
plot.ts(a)
plot.ts(SMA(a,n=2))
plot.ts(SMA(a,n=3))
plot.ts(SMA(a,n=4))
plot.ts(SMA(a,n=15))
plot.ts(SMA(a,n=20))
plot.ts(SMA(a,n=50))
plot.ts(SMA(a,n=n))
plot.ts(SMA(a,n=3))
plot.ts(SMA(a,n=8))
decompose(a)
decompose(a).x
decompose(a)$x
decompose(a)$seasonal
plot.ts(decompose(a)$seasonal)
plot(decompose(a))
decompose(a)$seasonal
decompose(a)$trend
a01$ts = ts(
a01$sales,
start = c(2013, 1),
end = c(2017, 7),
frequency = 12
)
d.arima <- auto.arima(a01$ts)
x <- forecast(d.arima, level = c(95, 80), h = 12)
hchart(x)
library('networkD3')
library("highcharter")
library('sqldf')
library('forecast')
d.arima <- auto.arima(a01$ts)
x <- forecast(d.arima, level = c(95, 80), h = 12)
hchart(x)
shiny::runApp()
runApp()
runApp()
