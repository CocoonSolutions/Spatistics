-- data import
CREATE TABLE public.data1
(
 pk serial NOT NULL,
 issuedate character varying(256),
 businessline character varying(256),
 brand character varying(256),
 producttype character varying(256),
 size character varying(256),
 country character varying(256),
 customer character varying(256),
 code character varying(256),
 quantity double precision,
 cost double precision,
 CONSTRAINT data1_pkey PRIMARY KEY (pk)
)
WITH (
 OIDS=FALSE
);
ALTER TABLE public.data1
 OWNER TO postgres;

ALTER TABLE public.data1 ALTER COLUMN issuedate TYPE DATE 
using to_date(issuedate, 'YYYY-MM-DD');

-- import utf-8,csv,header,tab delimited, NULL

SELECT datname,pid,state,query FROM pg_stat_activity;
-- data cleansing
select code, count(*) from data1
where brand is not null and businessline is not null 
and cost is not null and quantity is not null and quantity > 0 and cost > 0 
and businessline in ('F??S??','??????G????') and brand not in ('10 G???S ')
and size <> '????' and businessline = 'F??S??'
and size in ('EXTRA','NORMAL','EXTRA LARGE','SUPER','SMALL','EXTRA SUPER','STORTI','EXTRA EXTRA SUPER','PICCOLO','EXTRA EXTRA EXTRA SUPER (2000+)')
--and producttype = '??T????'
group by code
order by count(*) desc;

-- 571.879
select count(*) from data1 
where brand is not null and businessline is not null 
and cost is not null and quantity is not null and quantity > 0 and cost > 0 
and businessline in ('F??S??','??????G????') and brand not in ('10 G???S ')
and size <> '????' and businessline = 'F??S??'
and size in ('EXTRA','NORMAL','EXTRA LARGE','SUPER','SMALL','EXTRA SUPER','STORTI','EXTRA EXTRA SUPER','PICCOLO','EXTRA EXTRA EXTRA SUPER (2000+)');

create table data1clean as
select * 
from data1
where brand is not null and businessline is not null 
and cost is not null and quantity is not null and quantity > 0 and cost > 0 
and businessline in ('F??S??','??????G????') and brand not in ('10 G???S ')
and size <> '????' and businessline = 'F??S??'
and size in ('EXTRA','NORMAL','EXTRA LARGE','SUPER','SMALL','EXTRA SUPER','STORTI','EXTRA EXTRA SUPER','PICCOLO','EXTRA EXTRA EXTRA SUPER (2000+)');

create table data1trans as
select 
 pk,
 issuedate,
 case
   when brand = '11 ?O??' then 'Fresh'
   when brand = '12 ????????????' then 'Processed'
 	else 'N/A' 
 end as productline,
 case
	when size = 'EXTRA' then 'Large'
	when size = 'NORMAL' then 'Superior'
	when size = 'EXTRA LARGE' then 'Extra Large'
	when size = 'SUPER' then 'Jumbo'
	when size = 'SMALL' then 'Brilliant'
	when size = 'EXTRA SUPER' then 'Extra Jumbo'
	when size = 'STORTI' then 'Bullets'
	when size = 'EXTRA EXTRA SUPER' then 'Giant'
	when size = 'PICCOLO' then 'Fine'
	when size = 'EXTRA EXTRA EXTRA SUPER (2000+)' then 'Mammouth'
 	else 'N/A' 
 end as size,
 country,
 case 
 	when country = 'ITALY' then 'ITA'
	when country = 'GERMANY' then 'DEU'
	when country = 'FRANCE' then 'FRA'
	when country = 'GREECE' then 'GRC'
	when country = 'SPAIN' then 'ESP'
	when country = 'PORTUGAL' then 'PRT'
	when country = 'BELGIUM' then 'BEL'
	when country = 'HOLLAND' then 'NLD'
	when country = 'U.S.A.' then 'USA'
	when country = 'GREAT BRITAIN' then 'GBR'
	when country = 'ROMANIA' then 'ROU'
	when country = 'SWITZERLAND' then 'CHE'
	when country = 'BULGARIA' then 'BGR'
	when country = 'AUSTRIA' then 'AUT'
	when country = 'CANADA' then 'CAN'
	when country = 'CROATIA' then 'HRV'
	when country = 'UNITED ARAB EMIRATES' then 'ARE'
	when country = 'LUXEMBOURG' then 'LUX'
	when country = 'IRELAND' then 'IRL'
	when country = 'SLOVENIA' then 'SVN'
	when country = 'DENMARK' then 'DNK'
	when country = 'SERBIA' then 'SRB'
	when country = 'ALBANIA' then 'ALB'
	when country = 'REPUBLIC OF KAZAKHSTAN' then 'KAZ'
	when country = 'CYPRUS' then 'CYP'
	when country = 'CZECH REPUBLIC' then 'CZE'
	when country = 'RUSSIA' then 'RUS'
	when country = 'POLAND' then 'POL'
	when country = 'LITHUANIA' then 'LTU'
	when country = 'FYROM' then 'MKD'
	when country = 'UKRAINE' then 'UKR'
	when country = 'LATVIA' then 'LVA'
	when country = 'JORDAN' then 'JOR'
	when country = 'ESTONIA' then 'EST'
	when country = 'ISRAEL' then 'ISR'
	when country = 'KUWAIT' then 'KWT'
	when country = 'REPUBLIC OF BELARUS' then 'BLR'
 	else 'N/A' 
 end as countrycode,
 quantity
from data1clean;
-- datacountries import

-- datacountries https://developers.google.com/public-data/docs/canonical/countries_csv
CREATE TABLE public.datacountries
(
 pk serial NOT NULL,
 country character varying(2),
 latitude double precision,
 longtitude double precision,
 name character varying(256)
)
WITH (
 OIDS=FALSE
);
ALTER TABLE public.datacountries
 OWNER TO postgres;

-- import csv,header,tab delimited

alter table datacountries
add column country2 character varying(256);

update datacountries
set country2 =
 case
	when name = 'United States' then 'U.S.A.'
	when name = 'Kazakhstan' then 'REPUBLIC OF KAZAKHSTAN'
	when name = 'Belarus' then 'REPUBLIC OF BELARUS'
	when name = 'Netherlands' then 'HOLLAND'
	when name = 'United Kingdom' then 'GREAT BRITAIN'
	when name = 'Macedonia [FYROM]' then 'FYROM'
 	else name 
 end; 

create table data1trans2 as
select a.*, b.country countrycode2, b.name countryname2, b.latitude lat, b.longtitude lon
from data1trans a
join datacountries b on a.country = upper(b.country2);

-- first allow access to “Everyone” in the file in order to able to write in the file Properties/security/add/Everyone/apply

-- export to csv
COPY data1trans2 TO 'C:\\Users\\PC001\\Desktop\data1trans2.csv' DELIMITER ',' CSV HEADER;

alter table data1trans2
add column issueyear character varying(4);

alter table data1trans2
add column issuemonth character varying(2);

alter table data1trans2
add column issueday character varying(20);

update data1trans2
set 
issueyear = to_char(issuedate, 'YYYY'), 
issuemonth =  to_char(issuedate, 'MM'), 
issueday = to_char(issuedate, 'day');

COPY data1trans2 TO 'C:\\Users\\PC001\\Desktop\data1trans2.csv' DELIMITER ',' CSV HEADER;

create table data1trans3 as
select *
from data1trans2 a
where issueyear <> '2017';

-- http://data.worldbank.org/indicator/SP.POP.TOTL Population, total
-- http://data.worldbank.org/indicator/NY.GDP.PCAP.CD GDP per capita (current US$)

CREATE TABLE public.datacountry
(
  pk serial not null primary key,
Country character varying(100),
Code character varying(100),
pop2013 double precision,
pop2014 double precision,
pop2015 double precision,
pop2016 double precision,
Country2 character varying(100),
Code2 character varying(100),
gdp2013 double precision,
gdp2014 double precision,
gdp2015 double precision,
gdp2016 double precision
);

alter table datacountry
add column countryname2 character varying(256);

update datacountry
set countryname2 =
 case
	when country = 'Russian Federation' then 'Russia'
	when country = 'Macedonia, FYR' then 'Macedonia [FYROM]'
 	else country 
 end; 

 -- evaluate joins among datacountries, data1trans3 and datacountry
 select a.name, b.countryname2, c.countryname2
from datacountries a
join (select distinct countryname2 from data1trans3) b on a.name = b.countryname2
left join datacountry c on a.name = c.countryname2;

update datacountry
set gdp2016 = 40668.82
where countryname2 = 'Kuwait';

create table datacountries2 as
select a.latitude,
a.longtitude,
a.name countryname2,
a.country2,
c.country,
c.code,
c.pop2013,
c.pop2014,
c.pop2015,
c.pop2016,
c.code2,
c.gdp2013,
c.gdp2014,
c.gdp2015,
c.gdp2016
from datacountries a
join (select distinct countryname2 from data1trans3) b on a.name = b.countryname2
left join datacountry c on a.name = c.countryname2;

--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------

-- data2
CREATE TABLE public.data2
(
 pk serial NOT NULL PRIMARY KEY,
 Item_Brand character varying(256),
 Item_Line character varying(256),
 Item_Statistical character varying(256),
 country character varying(256),
 Quarter character varying(256),
 Sales_Q double precision,
 Sales_C double precision,
 issuedate date
)
WITH (
 OIDS=FALSE
);
ALTER TABLE public.data2
 OWNER TO postgres;
 
-- import csv utf8

-- data2clean
create table data2clean as  
select item_line productline, item_statistical productcat, country, issuedate, sum(sales_q) sales_q, sum(sales_c) sales_c from data2
where sales_c is not null and sales_c > 0
and sales_q is not null and sales_q > 0
group by item_line, item_statistical, country, issuedate;

-- data2trans1
create table data2trans1 as
select 
 issuedate,
 case
   when productline = 'ΦΡΕΣΚΑ' then 'Fresh'
   when productline = 'ΚΑΤΕΨΥΓΜΕΝΑ' then 'Frozen'
 	else 'N/A' 
 end as productline,
 case 
when productcat = 'ΛΙΘΡΙΝΙ' then 'Pandora'
when productcat = 'ΜΥΛΟΚΟΠΙ' then 'Shi drum'
when productcat = 'ΦΑΓΚΡΙ' then 'Red seabream'
when productcat = 'ΛΑΥΡΑΚΙ' then 'Seabass'
when productcat = 'ΤΣΙΠΟΥΡΑ' then 'Seabream'
when productcat = 'ΣΑΡΓΟΣ' then 'White seabream'
when productcat = 'ΜΥΤΑΚΙ' then 'Sharpsnout bream'
when productcat = 'ΚΡΑΝΙΟ' then 'Meagre'
else 'N/A' end,
 country,
 Sales_C,
 Sales_q,
to_char(issuedate, 'YYYY') issueyear, 
to_char(issuedate, 'MM') issuemonth, 
to_char(issuedate, 'day') issueday,
to_char(issuedate, 'YYYY-MM') issueyearmon
from data2clean
where to_char(issuedate, 'YYYY') <> '2017';

-- validate lon lat with datacountries source table
select upper(b.country2), a.country from datacountries b
right join (
select distinct country from data2trans1) a
on upper(b.country2) = a.country;

create table data2country as
select a.latitude,
a.longtitude,
a.name countryname2,
a.country2,
c.country,
c.code,
c.pop2013,
c.pop2014,
c.pop2015,
c.pop2016,
c.code2,
c.gdp2013,
c.gdp2014,
c.gdp2015,
c.gdp2016
from datacountries a
join (select distinct country from data2trans1) b on upper(a.country2) = b.country
left join datacountry c on a.name = c.countryname2;

--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------

-- data3
CREATE TABLE public.data3
(
 pk serial NOT NULL PRIMARY KEY,
 DocumentGroupDesc character varying(256),
 Country character varying(256),
 ItemLine character varying(256),
 ItemCategory character varying(256),
 ItemStatisticalGroup character varying(256),
 Size character varying(256),
 Date date,
 Quantity double precision,
 Sales double precision
)
WITH (
 OIDS=FALSE
);
ALTER TABLE public.data3
 OWNER TO postgres;
 
-- import csv utf8

-- data3clean
create table data3clean as
select * from data3;

update data3clean
set itemcategory = 'ΟΛΟΚΛΗΡΑ'
where itemcategory is null;

update data3clean
set Size =
 case
   when Size = '1500-2000' and ItemStatisticalGroup = 'ΚΡΑΝΙΟ' then '1000-2000'
   when Size in ('ΤΥΠΟΥ Β''','ΤΥΠΟΥ  Δ') then 'STORTI'
   when Size = '400 - 500' then '400-600'
   when Size = '1500' and ItemStatisticalGroup = 'ΦΑΓΚΡΙ' then '1000-1500'
   when Size = '600-1000' and ItemStatisticalGroup = 'ΦΑΓΚΡΙ' then '600-800'   
 	else Size 
 end;
 
-- data3trans1
create table data3trans1 as
select 
 country,
 case
   when itemline = 'ΦΡΕΣΚΑ' then 'Fresh'
   when itemline = 'ΚΑΤΕΨΥΓΜΕΝΑ' then 'Frozen'
 	else 'N/A' 
 end as itemline,
 case
	when ItemCategory = 'ΦΙΛΕΤΑ' then 'Fillet'
	when ItemCategory = 'ΑΠΕΝΤΕΡΩΜΕΝΑ' then 'Gutted'
	when ItemCategory = 'ΟΛΟΚΛΗΡΑ' then 'Whole'
	else 'N/A' 
end as ItemCategory,
 case 
when ItemStatisticalGroup = 'ΦΑΓΚΡΙ' then 'Red seabream'
when ItemStatisticalGroup = 'ΛΑΥΡΑΚΙ' then 'Seabass'
when ItemStatisticalGroup = 'ΤΣΙΠΟΥΡΑ' then 'Seabream'
when ItemStatisticalGroup = 'ΚΡΑΝΙΟ' then 'Meagre'
else 'N/A' 
end as ItemGroup,
size itemSize,
 quantity,
 sales,
 date as issuedate,
to_char(date, 'YYYY') issueyear, 
to_char(date, 'MM') issuemonth, 
to_char(date, 'day') issueday,
to_char(date, 'YYYY-MM') issueyearmon
from data3clean;

-- data3trans2
create table data3trans2 as
select * from data3trans1;

alter table data3trans2
add column itemsizerank character varying(256);

update data3trans2
set itemsizerank =
 case itemsize
when 'SPECIALCUTS' then '00_SPECIALCUTS'
when 'STORTI' then '01_STORTI'
when '150-200' then '02_150-200'
when '200-300' then '03_200-300'
when '300-400' then '04_300-400'
when '300-600' then '05_300-600'
when '400-600' then '06_400-600'
when '600-800' then '07_600-800'
when '500-1000' then '08_500-1000'
when '800-1000' then '09_800-1000'
when '1000-1500' then '10_1000-1500'
when '1000-2000' then '11_1000-2000'
when '1500-2000' then '12_1500-2000'
when '2000+' then '13_2000+'
when '2000-3000' then '14_2000-3000'
when '3000-4000' then '15_3000-4000'
when '4000+' then '16_4000+'
else 'N/A'
end;

-- validate lon lat with datacountries source table
select upper(b.country2), a.country from datacountries b
right join (
select distinct country from data3trans1) a
on upper(b.country2) = a.country;

create table data3country as
select a.latitude,
a.longtitude,
a.name countryname2,
a.country2,
c.country,
c.code,
c.pop2013,
c.pop2014,
c.pop2015,
c.pop2016,
c.code2,
c.gdp2013,
c.gdp2014,
c.gdp2015,
c.gdp2016
from datacountries a
join (select distinct country from data3trans1) b on upper(a.country2) = b.country
left join datacountry c on a.name = c.countryname2;